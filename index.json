{
  "api/index.html": {
    "href": "api/index.html",
    "title": "üìö API Documentation | TeleScope Documentation",
    "keywords": "üìö API Documentation The entire Framework is divided into 15+ NuGet packages that follow Clean Architecture principles. The packages are vertivally sliced into abstractions and their implementations. The horizontal divisions are made for each feature like connectors or cross-cutting utility functions. The colored vertical stacks represent the dependencies between the packages from top to bottom. There are no horizontal dependencies, except for the logging assembly. Note Follow the links behind the package shortcuts to navigate to the namespace overviews. <!-- https://www.tablesgenerator.com/html_tables# --> .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-iynb{background-color:#c0c0c0;color:#343434;font-weight:bold;text-align:center;vertical-align:top} .tg .tg-j62g{background-color:#c0c0c0;color:#343434;text-align:center;vertical-align:top} .tg .tg-y2pj{background-color:#ffccc9;color:#343434;text-align:center;vertical-align:top} .tg .tg-03x9{background-color:#ffce93;color:#343434;text-align:center;vertical-align:top} .tg .tg-766i{background-color:#fffc9e;color:#343434;text-align:center;vertical-align:top} .tg .tg-bd1l{background-color:#9aff99;color:#343434;text-align:center;vertical-align:top} .tg .tg-7b8a{background-color:#96fffb;color:#343434;text-align:center;vertical-align:top} .tg .tg-yrns{background-color:#67fd9a;color:#343434;text-align:center;vertical-align:top} .tg .tg-nr0s{background-color:#fe996b;color:#343434;text-align:center;vertical-align:top} .tg .tg-wtib{background-color:#34ff34;color:#343434;text-align:center;vertical-align:top} .tg .tg-n7am{background-color:#68cbd0;color:#343434;text-align:center;vertical-align:top} GuardClauses Extensions.Serilog Cli Mqtt Http Plc.Siemens Smtp Json Yaml Csv Parquet Mqtt.Abstractions Http.Abstractions Plc.Abstractions Smtp.Abstractions Logging UI Connectors.Abstractions Persistence.Abstractions TeleScope Have a nice day! üçª"
  },
  "api/TeleScope.Connectors.Abstractions.Events.ConnectorCompletedEventArgs.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Events.ConnectorCompletedEventArgs.html",
    "title": "Class ConnectorCompletedEventArgs | TeleScope Documentation",
    "keywords": "Class ConnectorCompletedEventArgs This argument is used for events, when a connector has completed a certain action. Inheritance System.Object ConnectorEventArgs ConnectorCompletedEventArgs Inherited Members ConnectorEventArgs.Name Namespace : TeleScope.Connectors.Abstractions.Events Assembly : TeleScope.Connectors.Abstractions.dll Syntax public class ConnectorCompletedEventArgs : ConnectorEventArgs Constructors | Improve this Doc View Source ConnectorCompletedEventArgs(String, Object) The default constructor sets the name of the invoking connector (or sender) and the response data. Declaration public ConnectorCompletedEventArgs(string name, object response) Parameters Type Name Description System.String name The name of the sender. System.Object response The generic response data of the sender, provided to the client-side. Properties | Improve this Doc View Source Response Gets the generic response data that should be converted on the client-side. Declaration public object Response { get; } Property Value Type Description System.Object"
  },
  "api/TeleScope.Connectors.Abstractions.Events.ConnectorCompletedEventHandler.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Events.ConnectorCompletedEventHandler.html",
    "title": "Delegate ConnectorCompletedEventHandler | TeleScope Documentation",
    "keywords": "Delegate ConnectorCompletedEventHandler This delegate is used as event, when a connector has completed a certain action. Namespace : TeleScope.Connectors.Abstractions.Events Assembly : TeleScope.Connectors.Abstractions.dll Syntax public delegate void ConnectorCompletedEventHandler(object sender, ConnectorCompletedEventArgs e); Parameters Type Name Description System.Object sender The instance that invokes the delegate method. ConnectorCompletedEventArgs e The resulting event arguments."
  },
  "api/TeleScope.Connectors.Abstractions.Events.ConnectorEventArgs.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Events.ConnectorEventArgs.html",
    "title": "Class ConnectorEventArgs | TeleScope Documentation",
    "keywords": "Class ConnectorEventArgs This argument is used for basic events, when a connector invokes an basic event. Inheritance System.Object ConnectorEventArgs ConnectorCompletedEventArgs ConnectorFailedEventArgs Namespace : TeleScope.Connectors.Abstractions.Events Assembly : TeleScope.Connectors.Abstractions.dll Syntax public class ConnectorEventArgs : object Constructors | Improve this Doc View Source ConnectorEventArgs() The default empty constructor creates an emtpy name. Declaration public ConnectorEventArgs() | Improve this Doc View Source ConnectorEventArgs(String) Sets the name of the invoking connector (or sender). Declaration public ConnectorEventArgs(string name) Parameters Type Name Description System.String name The name of the sender. Properties | Improve this Doc View Source Name Gets the name of the connector or sender as a semantic description. Declaration public string Name { get; protected set; } Property Value Type Description System.String"
  },
  "api/TeleScope.Connectors.Abstractions.Events.ConnectorEventHandler.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Events.ConnectorEventHandler.html",
    "title": "Delegate ConnectorEventHandler | TeleScope Documentation",
    "keywords": "Delegate ConnectorEventHandler This delegate is used as basic event, when a connector invokes an event. Namespace : TeleScope.Connectors.Abstractions.Events Assembly : TeleScope.Connectors.Abstractions.dll Syntax public delegate void ConnectorEventHandler(object sender, ConnectorEventArgs e); Parameters Type Name Description System.Object sender The instance that invokes the delegate method. ConnectorEventArgs e The resulting event arguments."
  },
  "api/TeleScope.Connectors.Abstractions.Events.ConnectorFailedEventArgs.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Events.ConnectorFailedEventArgs.html",
    "title": "Class ConnectorFailedEventArgs | TeleScope Documentation",
    "keywords": "Class ConnectorFailedEventArgs This argument is used for events, when a connector has failed a certain action. Inheritance System.Object ConnectorEventArgs ConnectorFailedEventArgs Inherited Members ConnectorEventArgs.Name Namespace : TeleScope.Connectors.Abstractions.Events Assembly : TeleScope.Connectors.Abstractions.dll Syntax public class ConnectorFailedEventArgs : ConnectorEventArgs Constructors | Improve this Doc View Source ConnectorFailedEventArgs(Exception, String) Sets name and the message of the exception as Message property. Declaration public ConnectorFailedEventArgs(Exception ex, string name) Parameters Type Name Description Exception ex The Exception that was catched within an action of a connector. System.String name The name of the sender. | Improve this Doc View Source ConnectorFailedEventArgs(Exception, String, String) Sets name, the exception and a specific message as Message property. Declaration public ConnectorFailedEventArgs(Exception ex, string name, string message) Parameters Type Name Description Exception ex The Exception that was catched within an action of a connector. System.String name The name of the sender. System.String message The message that has caused the failure within an action of a connector. | Improve this Doc View Source ConnectorFailedEventArgs(String, String) Sets name and the Message property. Declaration public ConnectorFailedEventArgs(string name, string message) Parameters Type Name Description System.String name The name of the sender. System.String message The message that has caused the failure within an action of a connector. Properties | Improve this Doc View Source Exception Gets the exception that may have caused an failure within an action of a connector. Declaration public Exception Exception { get; } Property Value Type Description Exception | Improve this Doc View Source Message Gets a detailled message that has caused an failure within an action of a connector. Declaration public string Message { get; } Property Value Type Description System.String"
  },
  "api/TeleScope.Connectors.Abstractions.Events.ConnectorFailedEventHandler.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Events.ConnectorFailedEventHandler.html",
    "title": "Delegate ConnectorFailedEventHandler | TeleScope Documentation",
    "keywords": "Delegate ConnectorFailedEventHandler This delegate is used as event, when a connector has failed a certain action. Namespace : TeleScope.Connectors.Abstractions.Events Assembly : TeleScope.Connectors.Abstractions.dll Syntax public delegate void ConnectorFailedEventHandler(object sender, ConnectorFailedEventArgs e); Parameters Type Name Description System.Object sender The instance that invokes the delegate method. ConnectorFailedEventArgs e The resulting event arguments."
  },
  "api/TeleScope.Connectors.Abstractions.Events.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Events.html",
    "title": "Namespace TeleScope.Connectors.Abstractions.Events | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Abstractions.Events Classes ConnectorCompletedEventArgs This argument is used for events, when a connector has completed a certain action. ConnectorEventArgs This argument is used for basic events, when a connector invokes an basic event. ConnectorFailedEventArgs This argument is used for events, when a connector has failed a certain action. Delegates ConnectorCompletedEventHandler This delegate is used as event, when a connector has completed a certain action. ConnectorEventHandler This delegate is used as basic event, when a connector invokes an event. ConnectorFailedEventHandler This delegate is used as event, when a connector has failed a certain action."
  },
  "api/TeleScope.Connectors.Abstractions.html": {
    "href": "api/TeleScope.Connectors.Abstractions.html",
    "title": "Namespace TeleScope.Connectors.Abstractions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Abstractions Interfaces IAsyncConnectable This interface extends the capabilities of connectors with async method calls. IConnectable This interface provides basic methods, properties and events to build a connection with any external service."
  },
  "api/TeleScope.Connectors.Abstractions.IAsyncConnectable.html": {
    "href": "api/TeleScope.Connectors.Abstractions.IAsyncConnectable.html",
    "title": "Interface IAsyncConnectable | TeleScope Documentation",
    "keywords": "Interface IAsyncConnectable This interface extends the capabilities of connectors with async method calls. Namespace : TeleScope.Connectors.Abstractions Assembly : TeleScope.Connectors.Abstractions.dll Syntax public interface IAsyncConnectable Methods | Improve this Doc View Source ConnectAsync() Connects to an external service in an asynchronous task. Declaration Task ConnectAsync() Returns Type Description Task The executing task. | Improve this Doc View Source DisconnectAsync() Disconnects from an external service in an asynchronous task. Declaration Task DisconnectAsync() Returns Type Description Task The executing task."
  },
  "api/TeleScope.Connectors.Abstractions.IConnectable.html": {
    "href": "api/TeleScope.Connectors.Abstractions.IConnectable.html",
    "title": "Interface IConnectable | TeleScope Documentation",
    "keywords": "Interface IConnectable This interface provides basic methods, properties and events to build a connection with any external service. Namespace : TeleScope.Connectors.Abstractions Assembly : TeleScope.Connectors.Abstractions.dll Syntax public interface IConnectable Properties | Improve this Doc View Source IsConnected Gets the state, if the connection is established or not. Declaration bool IsConnected { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Connect() Connects to an external service. Declaration IConnectable Connect() Returns Type Description IConnectable The calling instance. | Improve this Doc View Source Disconnect() Disconnects from an external service. Declaration IConnectable Disconnect() Returns Type Description IConnectable The calling instance. Events | Improve this Doc View Source Completed The event is invoked when a type specific method or action has finished successfully. Declaration event ConnectorCompletedEventHandler Completed Event Type Type Description ConnectorCompletedEventHandler | Improve this Doc View Source Connected The event is invoked when the Connect method has finished successfully. Declaration event ConnectorEventHandler Connected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Disconnected The event is invoked when the Disconnect method has finished successfully. Declaration event ConnectorEventHandler Disconnected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Failed The event is invoked when any method or action has finished with a failure. Declaration event ConnectorFailedEventHandler Failed Event Type Type Description ConnectorFailedEventHandler"
  },
  "api/TeleScope.Connectors.Abstractions.Secrets.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Secrets.html",
    "title": "Namespace TeleScope.Connectors.Abstractions.Secrets | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Abstractions.Secrets Classes Secret Implements the ISecret interface to encapsulate a name and a password within this type. Interfaces ISecret This interface provides properties and metods to encapsulate a names and passwords. The password is stored in a SecureString to increase security of sensitive data."
  },
  "api/TeleScope.Connectors.Abstractions.Secrets.ISecret.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Secrets.ISecret.html",
    "title": "Interface ISecret | TeleScope Documentation",
    "keywords": "Interface ISecret This interface provides properties and metods to encapsulate a names and passwords. The password is stored in a SecureString to increase security of sensitive data. Namespace : TeleScope.Connectors.Abstractions.Secrets Assembly : TeleScope.Connectors.Abstractions.dll Syntax public interface ISecret Properties | Improve this Doc View Source Name Gets or sets the name of the secret. Declaration string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password Gets the password of the secret. Declaration SecureString Password { get; } Property Value Type Description SecureString Methods | Improve this Doc View Source SetPassword(String) Sets the password property in a safe way. Declaration void SetPassword(in string password) Parameters Type Name Description System.String password The password string should be disposed after calling this method."
  },
  "api/TeleScope.Connectors.Abstractions.Secrets.Secret.html": {
    "href": "api/TeleScope.Connectors.Abstractions.Secrets.Secret.html",
    "title": "Class Secret | TeleScope Documentation",
    "keywords": "Class Secret Implements the ISecret interface to encapsulate a name and a password within this type. Inheritance System.Object Secret Implements ISecret Namespace : TeleScope.Connectors.Abstractions.Secrets Assembly : TeleScope.Connectors.Abstractions.dll Syntax public class Secret : object, ISecret Constructors | Improve this Doc View Source Secret() The default empty constructor initializes no properties. Declaration public Secret() | Improve this Doc View Source Secret(String, String) The onstructor initializes the name and password. The password string should be disposed after calling this constructor. Declaration public Secret(string name, string password) Parameters Type Name Description System.String name The name of the secret. System.String password The password of the secret. Properties | Improve this Doc View Source Name Gets or sets the name of the secret. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password Gets the password of the secret. Declaration public SecureString Password { get; } Property Value Type Description SecureString Methods | Improve this Doc View Source SetPassword(String) Sets the password property in a safe way. Declaration public void SetPassword(in string password) Parameters Type Name Description System.String password The password string should be disposed after calling this method. Implements ISecret"
  },
  "api/TeleScope.Connectors.Http.Abstractions.html": {
    "href": "api/TeleScope.Connectors.Http.Abstractions.html",
    "title": "Namespace TeleScope.Connectors.Http.Abstractions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Http.Abstractions Classes HttpEndpoint This class represents an editable http endpoint, where updates on the request part may be made without changing the base URL. Interfaces ICacheable<T> This interface provides a generic method to invoke external functions and cache its results. IHttpConnectable This interface provides extended methods, based on the IConnectable interface to build http connections."
  },
  "api/TeleScope.Connectors.Http.Abstractions.HttpEndpoint.html": {
    "href": "api/TeleScope.Connectors.Http.Abstractions.HttpEndpoint.html",
    "title": "Class HttpEndpoint | TeleScope Documentation",
    "keywords": "Class HttpEndpoint This class represents an editable http endpoint, where updates on the request part may be made without changing the base URL. Inheritance System.Object HttpEndpoint Namespace : TeleScope.Connectors.Http.Abstractions Assembly : TeleScope.Connectors.Http.Abstractions.dll Syntax public class HttpEndpoint : object Constructors | Improve this Doc View Source HttpEndpoint(String, String, HttpMethod) Sets the properties Address and Method with the given parameters. The Address is separated by the two parameters baseAddress and request . Declaration public HttpEndpoint(string baseAddress, string request, HttpMethod method) Parameters Type Name Description System.String baseAddress The base address of the http endpoint. System.String request The request part of the http endpoint. HttpMethod method The http method. | Improve this Doc View Source HttpEndpoint(Uri) The default constructor sets the property Address with the given parameter and uses the http method GET as MethodType . Declaration public HttpEndpoint(Uri address) Parameters Type Name Description Uri address The full adress of the http endpoint. | Improve this Doc View Source HttpEndpoint(Uri, HttpMethod) Sets the properties Address and MethodType with the given parameters. Declaration public HttpEndpoint(Uri address, HttpMethod method) Parameters Type Name Description Uri address The full adress of the http endpoint. HttpMethod method The http method. Properties | Improve this Doc View Source Address Gets the complete Url that has the base address and request part. Declaration public Uri Address { get; protected set; } Property Value Type Description Uri | Improve this Doc View Source Method Gets the http method is used by the endpoint. Declaration public HttpMethod Method { get; protected set; } Property Value Type Description HttpMethod Methods | Improve this Doc View Source SetMethodType(HttpMethod) This method may be overridden and updates the http method of the http endpoint. The Address property will not change. Declaration public virtual HttpEndpoint SetMethodType(HttpMethod method) Parameters Type Name Description HttpMethod method The http method. Returns Type Description HttpEndpoint | Improve this Doc View Source SetRequest(String) This method may be overridden and updates the request part of the http endpoint. The base url will not change. Declaration public virtual HttpEndpoint SetRequest(string request) Parameters Type Name Description System.String request The request part of the http endpoint. Returns Type Description HttpEndpoint The calling instance. | Improve this Doc View Source ToString() Overrides the ToString method and returns the method type and the absolute url of the http endpoint. Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/TeleScope.Connectors.Http.Abstractions.ICacheable-1.html": {
    "href": "api/TeleScope.Connectors.Http.Abstractions.ICacheable-1.html",
    "title": "Interface ICacheable<T> | TeleScope Documentation",
    "keywords": "Interface ICacheable<T> This interface provides a generic method to invoke external functions and cache its results. Namespace : TeleScope.Connectors.Http.Abstractions Assembly : TeleScope.Connectors.Http.Abstractions.dll Syntax public interface ICacheable<T> : IDisposable Type Parameters Name Description T The result type T is the return value of the external call or the cached data. Methods | Improve this Doc View Source GetOrInvoke(String, Func<T>) The implementation shall return the cached data, if the key holds it already or invokes the external function. Declaration T GetOrInvoke(string key, Func<T> invoke) Parameters Type Name Description System.String key The key that is used to store the result of the external function call. Func <T> invoke The external function that shall be called if the cache contains no data. Returns Type Description T The result of type T from cache or the external function call."
  },
  "api/TeleScope.Connectors.Http.Abstractions.IHttpConnectable.html": {
    "href": "api/TeleScope.Connectors.Http.Abstractions.IHttpConnectable.html",
    "title": "Interface IHttpConnectable | TeleScope Documentation",
    "keywords": "Interface IHttpConnectable This interface provides extended methods, based on the IConnectable interface to build http connections. Inherited Members IConnectable.Connected IConnectable.Disconnected IConnectable.Completed IConnectable.Failed IConnectable.IsConnected IConnectable.Connect() IConnectable.Disconnect() Namespace : TeleScope.Connectors.Http.Abstractions Assembly : TeleScope.Connectors.Http.Abstractions.dll Syntax public interface IHttpConnectable : IConnectable, IDisposable Methods | Improve this Doc View Source AddCancelToken(CancellationToken) The implementation shall add the to the internal connector in order to enable an cancellation of the pending http requests. Declaration IHttpConnectable AddCancelToken(CancellationToken token) Parameters Type Name Description CancellationToken token The token that is provided by the host system. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source AddHeader(String, String) Adds an http header to the next request as simple pair of name and value. Declaration IHttpConnectable AddHeader(string name, string value) Parameters Type Name Description System.String name The name of the header information. System.String value The value of the header information. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source CallAsync() Performs the http request asynchronously that is defined by the http endpoint and optional parameters. Declaration Task<string> CallAsync() Returns Type Description Task < System.String > The executing task whereby the result is the raw string of the response body. | Improve this Doc View Source CallAsync<T>(Func<String, T>) Performs the http request asynchronously that is defined by the http endpoint and optional parameters. Declaration Task<T> CallAsync<T>(Func<string, T> convert) Parameters Type Name Description Func < System.String , T> convert The function converts the response body into the generic type T. Returns Type Description Task <T> The executing task whereby the result of the task is of type T. Type Parameters Name Description T The generic returned type T. | Improve this Doc View Source Connect(HttpClient, HttpEndpoint) Tests the connection with the given http client and endpoint and stores both parameters internally. Declaration IHttpConnectable Connect(HttpClient client, HttpEndpoint endpoint) Parameters Type Name Description HttpClient client The http client that will be used by the connector. HttpEndpoint endpoint The endpoint configuration. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source Connect(HttpEndpoint) Tests the connection to the given endpoint and stores the parameter internally. The http client must be ready-to-use before calling this method. Declaration IHttpConnectable Connect(HttpEndpoint endpoint) Parameters Type Name Description HttpEndpoint endpoint The endpoint configuration. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source DisableCaching() The implementation shall disable the caching mechanism and free all allocated memory. Declaration IHttpConnectable DisableCaching() Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source SetContent(String) Sets the payload of the http request which must be represented as json compliant string. Declaration IHttpConnectable SetContent(string jsonContent) Parameters Type Name Description System.String jsonContent The payload for the next http request. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source SetContent(String, Encoding, String) Sets the payload of the next http request. Declaration IHttpConnectable SetContent(string content, Encoding encoding, string mediatype) Parameters Type Name Description System.String content The payload as string. Encoding encoding The encoding to format the string before serialization. System.String mediatype The media type of the payload. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source SetRequest(String, HttpMethod) The implementation shall update the request part of the http endpoint configuration. Declaration IHttpConnectable SetRequest(string request, HttpMethod method) Parameters Type Name Description System.String request The request part of the url. HttpMethod method The method type of the call. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source SetRequest(HttpEndpoint) The implementation shall update the complete http endpoint configuration. Declaration IHttpConnectable SetRequest(HttpEndpoint newEndpoint) Parameters Type Name Description HttpEndpoint newEndpoint The new thhp endpoint. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source WithCaching(UInt32, UInt32) The implementation shall add a caching mechanism for all upcoming http requests. Declaration IHttpConnectable WithCaching(uint refreshSeconds = null, uint expirationSeconds = null) Parameters Type Name Description System.UInt32 refreshSeconds The timeout in seconds where the cache will return (refresh) the cached data. System.UInt32 expirationSeconds The timeout in seconds where the cache will expire the cached data. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source WithCaching(TimeSpan, TimeSpan) The implementation shall add a caching mechanism for all upcoming http requests. Declaration IHttpConnectable WithCaching(TimeSpan refreshExpiration, TimeSpan resetExpiration) Parameters Type Name Description TimeSpan refreshExpiration The timeout where the cache will return (refresh) the cached data. TimeSpan resetExpiration The timeout where the cache will expire the cached data. Returns Type Description IHttpConnectable The calling instance."
  },
  "api/TeleScope.Connectors.Http.Caching.html": {
    "href": "api/TeleScope.Connectors.Http.Caching.html",
    "title": "Namespace TeleScope.Connectors.Http.Caching | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Http.Caching Classes StringMemoryCache This class provides a method to invoke external functions and cache its results."
  },
  "api/TeleScope.Connectors.Http.Caching.StringMemoryCache.html": {
    "href": "api/TeleScope.Connectors.Http.Caching.StringMemoryCache.html",
    "title": "Class StringMemoryCache | TeleScope Documentation",
    "keywords": "Class StringMemoryCache This class provides a method to invoke external functions and cache its results. Inheritance System.Object StringMemoryCache Implements ICacheable < System.String > IDisposable Namespace : TeleScope.Connectors.Http.Caching Assembly : TeleScope.Connectors.Http.dll Syntax public class StringMemoryCache : object, ICacheable<string>, IDisposable Constructors | Improve this Doc View Source StringMemoryCache(UInt32, UInt32) The constructor instanciates the internal caching with settings, based on the optional parameters or with default settings. Declaration public StringMemoryCache(uint refreshSeconds = null, uint expirationSeconds = null) Parameters Type Name Description System.UInt32 refreshSeconds The timeout in seconds where the cache will return (refresh) the cached data. System.UInt32 expirationSeconds The timeout in seconds where the cache will expire the cached data. | Improve this Doc View Source StringMemoryCache(TimeSpan, TimeSpan) The constructor instanciates the internal caching with settings, based on the two parameters. Declaration public StringMemoryCache(TimeSpan refreshExpiration, TimeSpan resetExpiration) Parameters Type Name Description TimeSpan refreshExpiration The timeout where the cache will return (refresh) the cached data. TimeSpan resetExpiration The timeout where the cache will expire the cached data. Methods | Improve this Doc View Source Dispose() Disposes all managed resources and supresses the to call the finalizer. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implements the Dispose function. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing If True, the internal managed resouces will be disposed. | Improve this Doc View Source Finalize() The finalizer disposes the unmanged resources. Declaration protected void Finalize() | Improve this Doc View Source GetOrInvoke(String, Func<String>) Returs the cached data, if the key holds it already or invokes the external function. Declaration public string GetOrInvoke(string key, Func<string> invoke) Parameters Type Name Description System.String key The key that is used to store the result of the external function call. Func < System.String > invoke The external function that shall be called if the cache contains no data. Returns Type Description System.String The result of type T from cache or the external function call. Implements ICacheable<T> IDisposable"
  },
  "api/TeleScope.Connectors.Http.html": {
    "href": "api/TeleScope.Connectors.Http.html",
    "title": "Namespace TeleScope.Connectors.Http | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Http Classes HttpConnector This class implements the IHttpConnectable interface and uses the standard microsoft http client."
  },
  "api/TeleScope.Connectors.Http.HttpConnector.html": {
    "href": "api/TeleScope.Connectors.Http.HttpConnector.html",
    "title": "Class HttpConnector | TeleScope Documentation",
    "keywords": "Class HttpConnector This class implements the IHttpConnectable interface and uses the standard microsoft http client. Inheritance System.Object HttpConnector Implements IHttpConnectable IConnectable IDisposable Namespace : TeleScope.Connectors.Http Assembly : TeleScope.Connectors.Http.dll Syntax public class HttpConnector : object, IHttpConnectable, IConnectable, IDisposable Constructors | Improve this Doc View Source HttpConnector() The default empty constructor binds a logger for internal usage. Declaration public HttpConnector() | Improve this Doc View Source HttpConnector(HttpClient) Saves the property and calls the empty default constructor. Declaration public HttpConnector(HttpClient client) Parameters Type Name Description HttpClient client The http client to perform requests. | Improve this Doc View Source HttpConnector(HttpClient, HttpEndpoint) Saves the properties and calls the empty default constructor. Declaration public HttpConnector(HttpClient client, HttpEndpoint endpoint) Parameters Type Name Description HttpClient client The http client to perform requests. HttpEndpoint endpoint The endpoint configuration executed by the client. Properties | Improve this Doc View Source IsConnected Gets the state, if the connection is established or not. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source AddCancelToken(CancellationToken) Adds the to the internal connector in order to enable an cancellation of the pending http requests. Declaration public IHttpConnectable AddCancelToken(CancellationToken token) Parameters Type Name Description CancellationToken token The token that is provided by the host system. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source AddHeader(String, String) Adds an http header to the next request as simple pair of name and value. Declaration public IHttpConnectable AddHeader(string name, string value) Parameters Type Name Description System.String name The name of the header information. System.String value The value of the header information. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source CallAsync() Performs the http request asynchronously that is defined by the http endpoint and optional parameters. Declaration public Task<string> CallAsync() Returns Type Description Task < System.String > The executing task whereby the result is the raw string of the response body. | Improve this Doc View Source CallAsync<T>(Func<String, T>) Performs the http request asynchronously that is defined by the http endpoint and optional parameters. Declaration public Task<T> CallAsync<T>(Func<string, T> convert) Parameters Type Name Description Func < System.String , T> convert The function converts the response body into the generic type T. Returns Type Description Task <T> The executing task whereby the result of the task is of type T. Type Parameters Name Description T The generic returned type T. | Improve this Doc View Source Connect() Tests the connection with the internal http client and endpoint. Declaration public IHttpConnectable Connect() Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source Connect(HttpClient, HttpEndpoint) Tests the connection with the given http client and endpoint and stores both parameters internally. Declaration public IHttpConnectable Connect(HttpClient client, HttpEndpoint endpoint) Parameters Type Name Description HttpClient client The http client that will be used by the connector. HttpEndpoint endpoint The endpoint configuration. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source Connect(HttpEndpoint) Tests the connection to the given endpoint and stores the parameter internally. The http client must be ready-to-use before calling this method. Declaration public IHttpConnectable Connect(HttpEndpoint endpoint) Parameters Type Name Description HttpEndpoint endpoint The endpoint configuration. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source DisableCaching() Disables the caching mechanism and frees the allocated memory. Declaration public IHttpConnectable DisableCaching() Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source Disconnect() Disposes the http client and deletes the internal fields. Declaration public IConnectable Disconnect() Returns Type Description IConnectable The calling instance. | Improve this Doc View Source Dispose() Disposes all managed resources and supresses the to call the finalizer. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implements the Dispose function. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing If True, the internal managed resouces will be disposed. | Improve this Doc View Source Finalize() The finalizer disposes the unmanged resources. Declaration protected void Finalize() | Improve this Doc View Source SetContent(String) Sets the payload of the http request which must be represented as json compliant string. Declaration public IHttpConnectable SetContent(string jsonContent) Parameters Type Name Description System.String jsonContent The payload for the next http request. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source SetContent(String, Encoding, String) Sets the payload of the next http request. Declaration public IHttpConnectable SetContent(string content, Encoding encoding, string mediatype) Parameters Type Name Description System.String content The payload as string. Encoding encoding The encoding to format the string before serialization. System.String mediatype The media type of the payload. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source SetRequest(String, HttpMethod) Updates the request part of the http endpoint configuration. Declaration public IHttpConnectable SetRequest(string request, HttpMethod method) Parameters Type Name Description System.String request The request part of the url. HttpMethod method Optional: The method type of the call. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source SetRequest(HttpEndpoint) Updates the complete http endpoint configuration. Declaration public IHttpConnectable SetRequest(HttpEndpoint newEndpoint) Parameters Type Name Description HttpEndpoint newEndpoint The new endpoint configuration. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source WithCaching(UInt32, UInt32) Adds a caching mechanism for all upcoming http requests. Declaration public IHttpConnectable WithCaching(uint refreshSeconds = null, uint expirationSeconds = null) Parameters Type Name Description System.UInt32 refreshSeconds The timeout in seconds where the cache will return (refresh) the cached data. System.UInt32 expirationSeconds The timeout in seconds where the cache will expire the cached data. Returns Type Description IHttpConnectable The calling instance. | Improve this Doc View Source WithCaching(TimeSpan, TimeSpan) Adds a caching mechanism for all upcoming http requests. Declaration public IHttpConnectable WithCaching(TimeSpan refreshExpiration, TimeSpan resetExpiration) Parameters Type Name Description TimeSpan refreshExpiration The timeout where the cache will return (refresh) the cached data. TimeSpan resetExpiration The timeout where the cache will expire the cached data. Returns Type Description IHttpConnectable The calling instance. Events | Improve this Doc View Source Completed The event is invoked when a type specific method or action has finished successfully. Declaration public event ConnectorCompletedEventHandler Completed Event Type Type Description ConnectorCompletedEventHandler | Improve this Doc View Source Connected The event is invoked when the Connect method has finished successfully. Declaration public event ConnectorEventHandler Connected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Disconnected The event is invoked when the Disconnect method has finished successfully. Declaration public event ConnectorEventHandler Disconnected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Failed The event is invoked when any method or action has finished with a failure. Declaration public event ConnectorFailedEventHandler Failed Event Type Type Description ConnectorFailedEventHandler Implements IHttpConnectable IConnectable IDisposable"
  },
  "api/TeleScope.Connectors.Mqtt.Abstractions.html": {
    "href": "api/TeleScope.Connectors.Mqtt.Abstractions.html",
    "title": "Namespace TeleScope.Connectors.Mqtt.Abstractions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Mqtt.Abstractions Interfaces IMqttConnectable This interface provides extended methods, based on the interfaces IConnectable and IAsyncConnectable in order to build mqtt connections to external brokers."
  },
  "api/TeleScope.Connectors.Mqtt.Abstractions.IMqttConnectable.html": {
    "href": "api/TeleScope.Connectors.Mqtt.Abstractions.IMqttConnectable.html",
    "title": "Interface IMqttConnectable | TeleScope Documentation",
    "keywords": "Interface IMqttConnectable This interface provides extended methods, based on the interfaces IConnectable and IAsyncConnectable in order to build mqtt connections to external brokers. Inherited Members IConnectable.Connected IConnectable.Disconnected IConnectable.Completed IConnectable.Failed IConnectable.IsConnected IConnectable.Connect() IConnectable.Disconnect() IAsyncConnectable.ConnectAsync() IAsyncConnectable.DisconnectAsync() Namespace : TeleScope.Connectors.Mqtt.Abstractions Assembly : TeleScope.Connectors.Mqtt.Abstractions.dll Syntax public interface IMqttConnectable : IConnectable, IAsyncConnectable Methods | Improve this Doc View Source PublishAsync(String, String) Sends a message string asynchronously to a given broker. Declaration Task PublishAsync(string topic, string message) Parameters Type Name Description System.String topic The topic of the message. System.String message The message that will be sent. Returns Type Description Task The executing task. | Improve this Doc View Source PublishAsync(String, String, Int32) Sends a message string asynchronously to a given broker. Declaration Task PublishAsync(string topic, string message, int qualityOfService) Parameters Type Name Description System.String topic The topic of the message. System.String message The message that will be sent. System.Int32 qualityOfService The level of quality that will be used for sending. Returns Type Description Task The executing task. | Improve this Doc View Source Subscribe(String) Subscribes to a new topic that the client will listen to. Declaration IMqttConnectable Subscribe(string topic) Parameters Type Name Description System.String topic The topic of interest. Returns Type Description IMqttConnectable The calling instance. | Improve this Doc View Source Unsubscribe(String) Unsubscribes from a topic that the client will no longer listen to. Declaration IMqttConnectable Unsubscribe(string topic) Parameters Type Name Description System.String topic The topic that will be removed. Returns Type Description IMqttConnectable The calling instance."
  },
  "api/TeleScope.Connectors.Mqtt.Events.html": {
    "href": "api/TeleScope.Connectors.Mqtt.Events.html",
    "title": "Namespace TeleScope.Connectors.Mqtt.Events | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Mqtt.Events Classes MqttConnectorEventArgs This argument class is used for mqtt related events, when the connector invokes an event. Delegates MqttConnectorEventHandler This delegate is used as event handler for mqtt conncetions."
  },
  "api/TeleScope.Connectors.Mqtt.Events.MqttConnectorEventArgs.html": {
    "href": "api/TeleScope.Connectors.Mqtt.Events.MqttConnectorEventArgs.html",
    "title": "Class MqttConnectorEventArgs | TeleScope Documentation",
    "keywords": "Class MqttConnectorEventArgs This argument class is used for mqtt related events, when the connector invokes an event. Inheritance System.Object MqttConnectorEventArgs Namespace : TeleScope.Connectors.Mqtt.Events Assembly : TeleScope.Connectors.Mqtt.dll Syntax public class MqttConnectorEventArgs : ConnectorEventArgs Constructors | Improve this Doc View Source MqttConnectorEventArgs(String, String) The basic constructor takes the topic and the message strings and stores it in the properties. Declaration public MqttConnectorEventArgs(string topic, string message) Parameters Type Name Description System.String topic The topic of the incoming mqtt data. System.String message The message of the incoming mqtt data. Properties | Improve this Doc View Source Message Gets the message string of the mqtt data. Declaration public string Message { get; } Property Value Type Description System.String"
  },
  "api/TeleScope.Connectors.Mqtt.Events.MqttConnectorEventHandler.html": {
    "href": "api/TeleScope.Connectors.Mqtt.Events.MqttConnectorEventHandler.html",
    "title": "Delegate MqttConnectorEventHandler | TeleScope Documentation",
    "keywords": "Delegate MqttConnectorEventHandler This delegate is used as event handler for mqtt conncetions. Namespace : TeleScope.Connectors.Mqtt.Events Assembly : TeleScope.Connectors.Mqtt.dll Syntax public delegate void MqttConnectorEventHandler(object sender, MqttConnectorEventArgs e); Parameters Type Name Description System.Object sender The instance that invokes the delegate method. MqttConnectorEventArgs e The resulting event arguments."
  },
  "api/TeleScope.Connectors.Mqtt.html": {
    "href": "api/TeleScope.Connectors.Mqtt.html",
    "title": "Namespace TeleScope.Connectors.Mqtt | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Mqtt Classes MqttConnector This class implements the IMqttConnectable interface and uses the The library MQTTnet internally. MqttSetup This is a helper class to encapsulate the needed properties for a proper mqtt setup."
  },
  "api/TeleScope.Connectors.Mqtt.MqttConnector.html": {
    "href": "api/TeleScope.Connectors.Mqtt.MqttConnector.html",
    "title": "Class MqttConnector | TeleScope Documentation",
    "keywords": "Class MqttConnector This class implements the IMqttConnectable interface and uses the The library MQTTnet internally. Inheritance System.Object MqttConnector Implements IMqttConnectable IConnectable IAsyncConnectable Namespace : TeleScope.Connectors.Mqtt Assembly : TeleScope.Connectors.Mqtt.dll Syntax public class MqttConnector : object, IMqttConnectable, IConnectable, IAsyncConnectable Constructors | Improve this Doc View Source MqttConnector(MqttSetup) The constructor instanciates the internal logging, stores the setup configuration and prepares the internal mqtt client. Declaration public MqttConnector(MqttSetup setup) Parameters Type Name Description MqttSetup setup The setup for the mqtt client. Properties | Improve this Doc View Source IsConnected Gets the state, if the connection is established or not. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Connect() Connects the internal Mqtt client with the prepared options and invokes the Failed event if an error occures. Declaration public IConnectable Connect() Returns Type Description IConnectable The calling instance. | Improve this Doc View Source ConnectAsync() Connects the internal Mqtt client asynchronously with the prepared options and invokes the Failed event if an error occures. Declaration public Task ConnectAsync() Returns Type Description Task The executing task. | Improve this Doc View Source Disconnect() Disconnects the internal Mqtt client. Declaration public IConnectable Disconnect() Returns Type Description IConnectable The calling instance. | Improve this Doc View Source DisconnectAsync() Disconnects the internal Mqtt client asynchronously. Declaration public Task DisconnectAsync() Returns Type Description Task The executing task. | Improve this Doc View Source PublishAsync(String, String) Sends a message string asynchronously to a given broker. Declaration public Task PublishAsync(string topic, string message) Parameters Type Name Description System.String topic The topic of the message. System.String message The message that will be sent. Returns Type Description Task The executing task. | Improve this Doc View Source PublishAsync(String, String, Int32) Sends a message string asynchronously to a given broker. Declaration public Task PublishAsync(string topic, string message, int qualityOfService) Parameters Type Name Description System.String topic The topic of the message. System.String message The message that will be sent. System.Int32 qualityOfService The level of quality that will be used for sending. Returns Type Description Task The executing task. | Improve this Doc View Source Subscribe(String) Subscribes to a new topic that the client will listen to. Declaration public IMqttConnectable Subscribe(string topic) Parameters Type Name Description System.String topic The topic of interest. Returns Type Description IMqttConnectable The calling instance. | Improve this Doc View Source Unsubscribe(String) Unsubscribes from a topic that the client will no longer listen to. Declaration public IMqttConnectable Unsubscribe(string topic) Parameters Type Name Description System.String topic The topic that will be removed. Returns Type Description IMqttConnectable The calling instance. Events | Improve this Doc View Source Completed The event is invoked when the PublishAsync methods have finished successfully. Declaration public event ConnectorCompletedEventHandler Completed Event Type Type Description ConnectorCompletedEventHandler | Improve this Doc View Source Connected The event is invoked when the Connect method has finished successfully. Declaration public event ConnectorEventHandler Connected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Disconnected The event is invoked when the Disconnect method has finished successfully. Declaration public event ConnectorEventHandler Disconnected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Failed The event is invoked when any method or action has finished with a failure. Declaration public event ConnectorFailedEventHandler Failed Event Type Type Description ConnectorFailedEventHandler | Improve this Doc View Source MessageReceived The event is invoked when the subscription to a topic has received a message. Declaration public event MqttConnectorEventHandler MessageReceived Event Type Type Description MqttConnectorEventHandler Implements IMqttConnectable IConnectable IAsyncConnectable"
  },
  "api/TeleScope.Connectors.Mqtt.MqttSetup.html": {
    "href": "api/TeleScope.Connectors.Mqtt.MqttSetup.html",
    "title": "Class MqttSetup | TeleScope Documentation",
    "keywords": "Class MqttSetup This is a helper class to encapsulate the needed properties for a proper mqtt setup. Inheritance System.Object MqttSetup Namespace : TeleScope.Connectors.Mqtt Assembly : TeleScope.Connectors.Mqtt.dll Syntax public class MqttSetup : object Constructors | Improve this Doc View Source MqttSetup() Creates the default constructor with settings that connets to the public hiveMQ broker. Declaration public MqttSetup() Properties | Improve this Doc View Source Broker Gets or sets the broker for a MQTT connection. Declaration public string Broker { get; set; } Property Value Type Description System.String | Improve this Doc View Source ClientID Gets or sets the client id for a MQTT connection. Declaration public string ClientID { get; set; } Property Value Type Description System.String | Improve this Doc View Source LastWill Message to be published by the client when he disconnects Declaration public string LastWill { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Gets tha broker and port as string information. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Port Gets or sets the port for a MQTT connection. Declaration public int Port { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source QualityOfService Gets or sets the quality of service (QOS). The QOS can have the values 0: AtMostOnce , 1: AtLeastOnce and 2: ExactlyOnce . Given values above or below the boundaries will be set to valid limits. Declaration public int QualityOfService { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Reconnection Gets or sets the time in seconds to reconnect after a connection loss. If the value is set to the default of 0, no reconnection attempt will be done. Declaration public int Reconnection { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Topics Gets or sets the list of topic strings. Declaration public List<string> Topics { get; set; } Property Value Type Description List < System.String > Methods | Improve this Doc View Source ToString() Returns a formatted string with important properties. Declaration public override string ToString() Returns Type Description System.String A fotmatted string."
  },
  "api/TeleScope.Connectors.Plc.Abstractions.html": {
    "href": "api/TeleScope.Connectors.Plc.Abstractions.html",
    "title": "Namespace TeleScope.Connectors.Plc.Abstractions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Plc.Abstractions Interfaces IPlcConnectable"
  },
  "api/TeleScope.Connectors.Plc.Abstractions.IPlcConnectable.html": {
    "href": "api/TeleScope.Connectors.Plc.Abstractions.IPlcConnectable.html",
    "title": "Interface IPlcConnectable | TeleScope Documentation",
    "keywords": "Interface IPlcConnectable Inherited Members IConnectable.Connected IConnectable.Disconnected IConnectable.Completed IConnectable.Failed IConnectable.IsConnected IConnectable.Connect() IConnectable.Disconnect() Namespace : TeleScope.Connectors.Plc.Abstractions Assembly : TeleScope.Connectors.Plc.Abstractions.dll Syntax public interface IPlcConnectable : IConnectable Methods | Improve this Doc View Source Read<T>() Declaration T Read<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Select(Object) Declaration IPlcConnectable Select(object parameter) Parameters Type Name Description System.Object parameter Returns Type Description IPlcConnectable | Improve this Doc View Source Select(Object[]) Declaration IPlcConnectable Select(object[] parameters) Parameters Type Name Description System.Object [] parameters Returns Type Description IPlcConnectable | Improve this Doc View Source Write<T>(T) Declaration void Write<T>(T data) Parameters Type Name Description T data Type Parameters Name Description T"
  },
  "api/TeleScope.Connectors.Plc.Siemens.Events.html": {
    "href": "api/TeleScope.Connectors.Plc.Siemens.Events.html",
    "title": "Namespace TeleScope.Connectors.Plc.Siemens.Events | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Plc.Siemens.Events Classes SiemensConnectorEventArgs SiemensConnectorFailedEventArgs"
  },
  "api/TeleScope.Connectors.Plc.Siemens.Events.SiemensConnectorEventArgs.html": {
    "href": "api/TeleScope.Connectors.Plc.Siemens.Events.SiemensConnectorEventArgs.html",
    "title": "Class SiemensConnectorEventArgs | TeleScope Documentation",
    "keywords": "Class SiemensConnectorEventArgs Inheritance System.Object SiemensConnectorEventArgs Namespace : TeleScope.Connectors.Plc.Siemens.Events Assembly : TeleScope.Connectors.Plc.Siemens.dll Syntax public class SiemensConnectorEventArgs : ConnectorEventArgs Constructors | Improve this Doc View Source SiemensConnectorEventArgs(String, Int32, String) Declaration public SiemensConnectorEventArgs(string name, int resultCode, string result) Parameters Type Name Description System.String name System.Int32 resultCode System.String result Properties | Improve this Doc View Source Result Gets the string representation of the result code. Declaration public string Result { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source ResultCode Gets the integer based result code of the occured action. Declaration public int ResultCode { get; protected set; } Property Value Type Description System.Int32"
  },
  "api/TeleScope.Connectors.Plc.Siemens.Events.SiemensConnectorFailedEventArgs.html": {
    "href": "api/TeleScope.Connectors.Plc.Siemens.Events.SiemensConnectorFailedEventArgs.html",
    "title": "Class SiemensConnectorFailedEventArgs | TeleScope Documentation",
    "keywords": "Class SiemensConnectorFailedEventArgs Inheritance System.Object SiemensConnectorFailedEventArgs Namespace : TeleScope.Connectors.Plc.Siemens.Events Assembly : TeleScope.Connectors.Plc.Siemens.dll Syntax public class SiemensConnectorFailedEventArgs : ConnectorFailedEventArgs Constructors | Improve this Doc View Source SiemensConnectorFailedEventArgs(Exception, String, Int32, String) Declaration public SiemensConnectorFailedEventArgs(Exception ex, string name, int resultCode, string result) Parameters Type Name Description Exception ex System.String name System.Int32 resultCode System.String result Properties | Improve this Doc View Source ResultCode Gets the integer based result code of the occured action. Declaration public int ResultCode { get; protected set; } Property Value Type Description System.Int32"
  },
  "api/TeleScope.Connectors.Plc.Siemens.html": {
    "href": "api/TeleScope.Connectors.Plc.Siemens.html",
    "title": "Namespace TeleScope.Connectors.Plc.Siemens | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Plc.Siemens Classes S7Connector S7Results This static class contains all SIEMENS S7 result or error codes and makes them accessible as integer or as a string via the GetString method. S7Setup This class holds setup-information to connect SIEMENS S7 PLCs. Structs S7Selector This structure holds information to select a data source on SIEMENS S7 PLCs."
  },
  "api/TeleScope.Connectors.Plc.Siemens.S7Connector.html": {
    "href": "api/TeleScope.Connectors.Plc.Siemens.S7Connector.html",
    "title": "Class S7Connector | TeleScope Documentation",
    "keywords": "Class S7Connector Inheritance System.Object S7Connector Implements IPlcConnectable IConnectable Namespace : TeleScope.Connectors.Plc.Siemens Assembly : TeleScope.Connectors.Plc.Siemens.dll Syntax public class S7Connector : object, IPlcConnectable, IConnectable Constructors | Improve this Doc View Source S7Connector(S7Setup) The default empty constructor instanciates the internal S7 client. Declaration public S7Connector(S7Setup s7Setup) Parameters Type Name Description S7Setup s7Setup Properties | Improve this Doc View Source IsConnected Gets the information if the client is instanciated and connected or not. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Result Gets the last received result as a string representation from the connected PLC. Attention: Async or concurrent calls may override the value. Declaration public string Result { get; } Property Value Type Description System.String | Improve this Doc View Source ResultCode Gets the last received result code from the connected PLC. Attention: Async or concurrent calls may override the value. Declaration public int ResultCode { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Connect() Opens the connection to the PLC. Declaration public IConnectable Connect() Returns Type Description IConnectable The calling instance. | Improve this Doc View Source Disconnect() Closes the connection from the PLC. Declaration public IConnectable Disconnect() Returns Type Description IConnectable The calling instance. | Improve this Doc View Source Read<T>() A generic read method that covers most common types. Declaration public T Read<T>() Returns Type Description T The result value of type T. Type Parameters Name Description T The return type of the method. | Improve this Doc View Source Select(Object) Stores the select parameters in the internal structure Sharp7Parameter and validates the input. Supported types are S7Selector, strings with proper structure and integer arrays, representing the datablock [0], the bit offset [1] and count [2] for bit offsets or character counts. Declaration public IPlcConnectable Select(object parameter) Parameters Type Name Description System.Object parameter The generic object may contain the select parameters in different forms. Returns Type Description IPlcConnectable The calling instance. | Improve this Doc View Source Select(Object[]) Stores the select parameters in the internal structure Sharp7Parameter and validates the array beforehand. The parameter array must contain three integers repesenting the datablock [0], the bit offset [1] and the count [2] for bit offsets or character counts. Declaration public IPlcConnectable Select(object[] parameters) Parameters Type Name Description System.Object [] parameters The array of S7 parameters to select and read lateron the data. Returns Type Description IPlcConnectable The calling instance. | Improve this Doc View Source Select(S7Selector) Stores the select parameters to read or write to the PLC lateron. Declaration public IPlcConnectable Select(S7Selector parameter) Parameters Type Name Description S7Selector parameter The S7 specific parameters. Returns Type Description IPlcConnectable The calling instance. | Improve this Doc View Source Write<T>(T) Declaration public void Write<T>(T data) Parameters Type Name Description T data Type Parameters Name Description T Events | Improve this Doc View Source Completed Declaration public event ConnectorCompletedEventHandler Completed Event Type Type Description ConnectorCompletedEventHandler | Improve this Doc View Source Connected Declaration public event ConnectorEventHandler Connected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Disconnected Declaration public event ConnectorEventHandler Disconnected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Failed Declaration public event ConnectorFailedEventHandler Failed Event Type Type Description ConnectorFailedEventHandler Implements IPlcConnectable IConnectable"
  },
  "api/TeleScope.Connectors.Plc.Siemens.S7Results.html": {
    "href": "api/TeleScope.Connectors.Plc.Siemens.S7Results.html",
    "title": "Class S7Results | TeleScope Documentation",
    "keywords": "Class S7Results This static class contains all SIEMENS S7 result or error codes and makes them accessible as integer or as a string via the GetString method. Inheritance System.Object S7Results Namespace : TeleScope.Connectors.Plc.Siemens Assembly : TeleScope.Connectors.Plc.Siemens.dll Syntax public static class S7Results : object Fields | Improve this Doc View Source CliAddressOutOfRange Declaration public const int CliAddressOutOfRange = null Field Value Type Description System.Int32 | Improve this Doc View Source CliAlreadyRun Declaration public const int CliAlreadyRun = null Field Value Type Description System.Int32 | Improve this Doc View Source CliAlreadyStop Declaration public const int CliAlreadyStop = null Field Value Type Description System.Int32 | Improve this Doc View Source CliBufferTooSmall Declaration public const int CliBufferTooSmall = null Field Value Type Description System.Int32 | Improve this Doc View Source CliCannotChangeParam Declaration public const int CliCannotChangeParam = null Field Value Type Description System.Int32 | Improve this Doc View Source CliCannotCompress Declaration public const int CliCannotCompress = null Field Value Type Description System.Int32 | Improve this Doc View Source CliCannotCopyRamToRom Declaration public const int CliCannotCopyRamToRom = null Field Value Type Description System.Int32 | Improve this Doc View Source CliCannotStartPLC Declaration public const int CliCannotStartPLC = null Field Value Type Description System.Int32 | Improve this Doc View Source CliCannotStopPLC Declaration public const int CliCannotStopPLC = null Field Value Type Description System.Int32 | Improve this Doc View Source CliDestroying Declaration public const int CliDestroying = null Field Value Type Description System.Int32 | Improve this Doc View Source CliFunctionNotImplemented Declaration public const int CliFunctionNotImplemented = null Field Value Type Description System.Int32 | Improve this Doc View Source CliFunctionRefused Declaration public const int CliFunctionRefused = null Field Value Type Description System.Int32 | Improve this Doc View Source CliFunNotAvailable Declaration public const int CliFunNotAvailable = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidBlockNumber Declaration public const int CliInvalidBlockNumber = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidBlockSize Declaration public const int CliInvalidBlockSize = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidBlockType Declaration public const int CliInvalidBlockType = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidDataSizeRecvd Declaration public const int CliInvalidDataSizeRecvd = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidParamNumber Declaration public const int CliInvalidParamNumber = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidParams Declaration public const int CliInvalidParams = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidPassword Declaration public const int CliInvalidPassword = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidPlcAnswer Declaration public const int CliInvalidPlcAnswer = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidTransportSize Declaration public const int CliInvalidTransportSize = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidValue Declaration public const int CliInvalidValue = null Field Value Type Description System.Int32 | Improve this Doc View Source CliInvalidWordLen Declaration public const int CliInvalidWordLen = null Field Value Type Description System.Int32 | Improve this Doc View Source CliItemNotAvailable Declaration public const int CliItemNotAvailable = null Field Value Type Description System.Int32 | Improve this Doc View Source CliJobPending Declaration public const int CliJobPending = null Field Value Type Description System.Int32 | Improve this Doc View Source CliJobTimeout Declaration public const int CliJobTimeout = null Field Value Type Description System.Int32 | Improve this Doc View Source CliNeedPassword Declaration public const int CliNeedPassword = null Field Value Type Description System.Int32 | Improve this Doc View Source CliNegotiatingPDU Declaration public const int CliNegotiatingPDU = null Field Value Type Description System.Int32 | Improve this Doc View Source CliNoPasswordToSetOrClear Declaration public const int CliNoPasswordToSetOrClear = null Field Value Type Description System.Int32 | Improve this Doc View Source CliPartialDataRead Declaration public const int CliPartialDataRead = null Field Value Type Description System.Int32 | Improve this Doc View Source CliPartialDataWritten Declaration public const int CliPartialDataWritten = null Field Value Type Description System.Int32 | Improve this Doc View Source CliSizeOverPDU Declaration public const int CliSizeOverPDU = null Field Value Type Description System.Int32 | Improve this Doc View Source CliTooManyItems Declaration public const int CliTooManyItems = null Field Value Type Description System.Int32 | Improve this Doc View Source CliUploadSequenceFailed Declaration public const int CliUploadSequenceFailed = null Field Value Type Description System.Int32 | Improve this Doc View Source CliWriteDataSizeMismatch Declaration public const int CliWriteDataSizeMismatch = null Field Value Type Description System.Int32 | Improve this Doc View Source IsoConnect Declaration public const int IsoConnect = null Field Value Type Description System.Int32 | Improve this Doc View Source IsoInvalidDataSize Declaration public const int IsoInvalidDataSize = null Field Value Type Description System.Int32 | Improve this Doc View Source IsoInvalidPDU Declaration public const int IsoInvalidPDU = null Field Value Type Description System.Int32 | Improve this Doc View Source NoError Declaration public const int NoError = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPConnectionFailed Declaration public const int TCPConnectionFailed = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPConnectionReset Declaration public const int TCPConnectionReset = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPConnectionTimeout Declaration public const int TCPConnectionTimeout = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPDataReceive Declaration public const int TCPDataReceive = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPDataSend Declaration public const int TCPDataSend = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPNotConnected Declaration public const int TCPNotConnected = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPReceiveTimeout Declaration public const int TCPReceiveTimeout = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPSendTimeout Declaration public const int TCPSendTimeout = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPSocketCreation Declaration public const int TCPSocketCreation = null Field Value Type Description System.Int32 | Improve this Doc View Source TCPUnreachableHost Declaration public const int TCPUnreachableHost = null Field Value Type Description System.Int32 Methods | Improve this Doc View Source GetString(Int32) Declaration public static string GetString(int code) Parameters Type Name Description System.Int32 code Returns Type Description System.String"
  },
  "api/TeleScope.Connectors.Plc.Siemens.S7Selector.html": {
    "href": "api/TeleScope.Connectors.Plc.Siemens.S7Selector.html",
    "title": "Struct S7Selector | TeleScope Documentation",
    "keywords": "Struct S7Selector This structure holds information to select a data source on SIEMENS S7 PLCs. Namespace : TeleScope.Connectors.Plc.Siemens Assembly : TeleScope.Connectors.Plc.Siemens.dll Syntax public struct S7Selector Constructors | Improve this Doc View Source S7Selector(Int32, Int32) Creates an instance of the selector with the given parameters. The property Number will be zero. Declaration public S7Selector(int datablock, int bitOffset) Parameters Type Name Description System.Int32 datablock The datablock to be selected. System.Int32 bitOffset The bit offset to be selected. | Improve this Doc View Source S7Selector(Int32, Int32, Int32) Creates an instance of the selector with the given parameters. Declaration public S7Selector(int datablock, int bitOffset, int count) Parameters Type Name Description System.Int32 datablock The datablock to be selected. System.Int32 bitOffset The bit offset to be selected. System.Int32 count The count of a single bit index or the number of characters. Properties | Improve this Doc View Source BitOffset Gets or sets the bit offset within the datablock. Declaration public int BitOffset { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Datablock Gets or sets the selected datablock. Declaration public int Datablock { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Number Gets or sets the number or index of a single bit or the number of characters to be read. Declaration public int Number { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString() Overrides the ToString to present the properties. Declaration public override string ToString() Returns Type Description System.String The combined string with property values."
  },
  "api/TeleScope.Connectors.Plc.Siemens.S7Setup.html": {
    "href": "api/TeleScope.Connectors.Plc.Siemens.S7Setup.html",
    "title": "Class S7Setup | TeleScope Documentation",
    "keywords": "Class S7Setup This class holds setup-information to connect SIEMENS S7 PLCs. Inheritance System.Object S7Setup Namespace : TeleScope.Connectors.Plc.Siemens Assembly : TeleScope.Connectors.Plc.Siemens.dll Syntax public class S7Setup : object Constructors | Improve this Doc View Source S7Setup() Default empty constructor that calls the constructor of the base class Declaration public S7Setup() Properties | Improve this Doc View Source IPAddress Gets or sets the IP address of the PLC. Declaration public string IPAddress { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Gets or sets the name of the S7 PLC. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Rack Gets or sets the rack of the PLC. Declaration public int Rack { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Slot Gets or sets the slot of the PLC. Declaration public int Slot { get; set; } Property Value Type Description System.Int32"
  },
  "api/TeleScope.Connectors.Smtp.Abstractions.html": {
    "href": "api/TeleScope.Connectors.Smtp.Abstractions.html",
    "title": "Namespace TeleScope.Connectors.Smtp.Abstractions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Smtp.Abstractions Interfaces ISmtpConnectable This interface provides extended methods in addition to the IConnectable interface. It supprots SMTP connections to send emails with a minimal interface."
  },
  "api/TeleScope.Connectors.Smtp.Abstractions.ISmtpConnectable.html": {
    "href": "api/TeleScope.Connectors.Smtp.Abstractions.ISmtpConnectable.html",
    "title": "Interface ISmtpConnectable | TeleScope Documentation",
    "keywords": "Interface ISmtpConnectable This interface provides extended methods in addition to the IConnectable interface. It supprots SMTP connections to send emails with a minimal interface. Inherited Members IConnectable.Connected IConnectable.Disconnected IConnectable.Completed IConnectable.Failed IConnectable.IsConnected IConnectable.Connect() IConnectable.Disconnect() Namespace : TeleScope.Connectors.Smtp.Abstractions Assembly : TeleScope.Connectors.Smtp.Abstractions.dll Syntax public interface ISmtpConnectable : IConnectable Methods | Improve this Doc View Source Attach(FileInfo, String) This method should attach a file to the latest email. Declaration ISmtpConnectable Attach(FileInfo file, string mimeType = null) Parameters Type Name Description FileInfo file The file info object that will be attached. System.String mimeType The mime type of the file. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source BlindCarbonCopy(String) This method should add a bcc (blind carbon body) address to the last email that was created by the last call of NewMessage . Declaration ISmtpConnectable BlindCarbonCopy(string to) Parameters Type Name Description System.String to The email address of the receiver. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source BlindCarbonCopy(String[]) This method should add a bcc (blind carbon body) address to the last email that was created by the last call of NewMessage . Declaration ISmtpConnectable BlindCarbonCopy(string[] to) Parameters Type Name Description System.String [] to The email addresses of the receivers. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source CarbonCopy(String) This method should add a cc (carbon body) address to the last email that was created by the last call of NewMessage . Declaration ISmtpConnectable CarbonCopy(string to) Parameters Type Name Description System.String to The email address of the receiver. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source CarbonCopy(String[]) This method should add a cc (carbon body) address to the last email that was created by the last call of NewMessage . Declaration ISmtpConnectable CarbonCopy(string[] to) Parameters Type Name Description System.String [] to The email addresses of the receivers. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source HighPriority() This method should add a high priority flag to the latest email. Declaration ISmtpConnectable HighPriority() Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source LowPriority() This method should add a low priority flag to the latest email. Declaration ISmtpConnectable LowPriority() Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source NewMessage(String, String) This method should add a new message to an internal collection with only specific properties, needed to build a new email object. Sender and receivers should be known by the implementing instace beforehand. Declaration ISmtpConnectable NewMessage(string subject, string body) Parameters Type Name Description System.String subject The subject of the email. System.String body The message of the email. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source NewMessage(String, String, String, String) This method should add a new message to an internal collection with the essetial properties, needed to build a new email object. Declaration ISmtpConnectable NewMessage(string from, string to, string subject, string body) Parameters Type Name Description System.String from The email address of the sender. System.String to The email address of the receiver. System.String subject The subject of the email. System.String body The message of the email. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source NewMessage(String, String[], String, String) This method should add a new message to an internal collection with the essetial properties needed to build an email object. Declaration ISmtpConnectable NewMessage(string from, string[] to, string subject, string body) Parameters Type Name Description System.String from The email address of the sender. System.String [] to The email addresses of the receivers. System.String subject The subject of the email. System.String body The message of the email. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source Send() This method should send all the created and configured emails at once and clear its inner stack. Declaration (int total, int success, int failed) Send() Returns Type Description System.ValueTuple < System.Int32 , System.Int32 , System.Int32 > Returns a result triple that contains the total amount of sent emails, the sucessful and the failed ones."
  },
  "api/TeleScope.Connectors.Smtp.html": {
    "href": "api/TeleScope.Connectors.Smtp.html",
    "title": "Namespace TeleScope.Connectors.Smtp | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Connectors.Smtp Classes SmtpConnector This class implements the ISmtpConnectable interface and uses only the System.Net.Mail namespace internally. SmtpSetup This class encapsulates the settings for the SmtpConnector type."
  },
  "api/TeleScope.Connectors.Smtp.SmtpConnector.html": {
    "href": "api/TeleScope.Connectors.Smtp.SmtpConnector.html",
    "title": "Class SmtpConnector | TeleScope Documentation",
    "keywords": "Class SmtpConnector This class implements the ISmtpConnectable interface and uses only the System.Net.Mail namespace internally. Inheritance System.Object SmtpConnector Implements ISmtpConnectable IConnectable Namespace : TeleScope.Connectors.Smtp Assembly : TeleScope.Connectors.Smtp.dll Syntax public class SmtpConnector : object, ISmtpConnectable, IConnectable Constructors | Improve this Doc View Source SmtpConnector(String, Int32, ISecret) The constructor gets the SMTP host configuration injected. Declaration public SmtpConnector(string host, int port, ISecret secret) Parameters Type Name Description System.String host The name of the host or server. System.Int32 port The port where the SMTP protocol is accessible at the host. ISecret secret The user credentials to get access at the host. | Improve this Doc View Source SmtpConnector(SmtpSetup) The default constructor stores the setup and starts the internal logging mechanism. Declaration public SmtpConnector(SmtpSetup setup) Parameters Type Name Description SmtpSetup setup The setup that is used for the smtp connections. Properties | Improve this Doc View Source IsConnected Gets the state, if the connection is established or not. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Attach(FileInfo, String) This method should attach a file to the latest email. Declaration public ISmtpConnectable Attach(FileInfo file, string mimeType = null) Parameters Type Name Description FileInfo file The file info object that will be attached. System.String mimeType The mime type of the file. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source BlindCarbonCopy(String) Adds a bcc (blind carbon body) address to the last email that was created by the last call of NewMessage . Declaration public ISmtpConnectable BlindCarbonCopy(string to) Parameters Type Name Description System.String to The email address of the receiver. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source BlindCarbonCopy(String[]) Adds a bcc (blind carbon body) address to the last email that was created by the last call of NewMessage . Declaration public ISmtpConnectable BlindCarbonCopy(string[] to) Parameters Type Name Description System.String [] to The email addresses of the receivers. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source CarbonCopy(String) Adds a cc (carbon body) address to the last email that was created by the last call of NewMessage . Declaration public ISmtpConnectable CarbonCopy(string to) Parameters Type Name Description System.String to The email address of the receiver. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source CarbonCopy(String[]) Adds a cc (carbon body) address to the last email that was created by the last call of NewMessage . Declaration public ISmtpConnectable CarbonCopy(string[] to) Parameters Type Name Description System.String [] to The email addresses of the receivers. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source Connect() Clears the internal collection of emails and invokes the Connected event. Declaration public ISmtpConnectable Connect() Returns Type Description ISmtpConnectable The calling instance. | Improve this Doc View Source Disconnect() Clears the internal collection of emails and invokes the Disconnected event. Declaration public ISmtpConnectable Disconnect() Returns Type Description ISmtpConnectable The calling instance. | Improve this Doc View Source HighPriority() Adds a high priority flag to the latest email. Declaration public ISmtpConnectable HighPriority() Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source LowPriority() Adds a low priority flag to the latest email. Declaration public ISmtpConnectable LowPriority() Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source NewMessage(String, String) Adds a new message to an internal collection of emails with only specific properties, needed to build a new email object. Sender and receivers are known by the implementing instace beforehand. Declaration public ISmtpConnectable NewMessage(string subject, string body) Parameters Type Name Description System.String subject The subject of the email. System.String body The message of the email. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source NewMessage(String, String, String, String) Adds a new message to an internal collection of emails with the essetial properties, needed to build a new email object. Declaration public ISmtpConnectable NewMessage(string from, string to, string subject, string body) Parameters Type Name Description System.String from The email address of the sender. System.String to The email address of the receiver. System.String subject The subject of the email. System.String body The message of the email. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source NewMessage(String, String[], String, String) Adds a new message to an internal collection of emails with the essetial properties, needed to build a new email object. Declaration public ISmtpConnectable NewMessage(string from, string[] to, string subject, string body) Parameters Type Name Description System.String from The email address of the sender. System.String [] to The email addresses of the receivers. System.String subject The subject of the email. System.String body The message of the email. Returns Type Description ISmtpConnectable Returns the calling instance to enable chaining method calls. | Improve this Doc View Source Send() Sends all the created and configured emails at once and clears the inner stack. If emails where not sent, those objects are removed internally anyways and the logging provides detailed information. Declaration public (int total, int success, int failed) Send() Returns Type Description System.ValueTuple < System.Int32 , System.Int32 , System.Int32 > Returns a result triple that contains the total amount of sent emails, the sucessful and the failed ones. Events | Improve this Doc View Source Completed The event is invoked when the Send() method has finished successfully. Declaration public event ConnectorCompletedEventHandler Completed Event Type Type Description ConnectorCompletedEventHandler | Improve this Doc View Source Connected The event is invoked when the Connect() method has finished successfully. Declaration public event ConnectorEventHandler Connected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Disconnected The event is invoked when the Disconnect() method has finished successfully. Declaration public event ConnectorEventHandler Disconnected Event Type Type Description ConnectorEventHandler | Improve this Doc View Source Failed The event is invoked when the Send() method has finished with a failure. Declaration public event ConnectorFailedEventHandler Failed Event Type Type Description ConnectorFailedEventHandler Implements ISmtpConnectable IConnectable"
  },
  "api/TeleScope.Connectors.Smtp.SmtpSetup.html": {
    "href": "api/TeleScope.Connectors.Smtp.SmtpSetup.html",
    "title": "Class SmtpSetup | TeleScope Documentation",
    "keywords": "Class SmtpSetup This class encapsulates the settings for the SmtpConnector type. Inheritance System.Object SmtpSetup Namespace : TeleScope.Connectors.Smtp Assembly : TeleScope.Connectors.Smtp.dll Syntax public class SmtpSetup : object Constructors | Improve this Doc View Source SmtpSetup() The default empty constructor sets the retry limit to its default value. Declaration public SmtpSetup() Properties | Improve this Doc View Source Credentials Gets or sets the connection information (e.g. name and passwort) of type . Declaration public ISecret Credentials { get; set; } Property Value Type Description ISecret | Improve this Doc View Source Host Gets or sets the host for the smtp connection. Declaration public string Host { get; set; } Property Value Type Description System.String | Improve this Doc View Source Port Gets or sets the port for the smtp connection. Please note the default ports: Port 25 (non-secure) - this is the default port (often times blocked by your ISP - Internet Service Provider) Port 26 (non-secure) - use port 26 if port 25 is not working and is blocked by your ISP Port 465 (secure - SSL) - this is to be used to send email via SMTP securely over SSL Port 587 (secure - TLS) - this is to be used to send email via SMTP securely over TLS Declaration public int Port { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Receivers Gets or sets all receivers that are addressed by sending an email. Declaration public string[] Receivers { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source Sender Gets or set the sending email address. Declaration public string Sender { get; set; } Property Value Type Description System.String"
  },
  "api/TeleScope.GuardClauses.Abstractions.GuardBase.html": {
    "href": "api/TeleScope.GuardClauses.Abstractions.GuardBase.html",
    "title": "Class GuardBase | TeleScope Documentation",
    "keywords": "Class GuardBase This pure abstract base class implements all interfaces of guard functions in order to provide a complete set of implementations for user-defined guard classes. Inheritance System.Object GuardBase Implements IDefensiveGuardable INumericGuardable IStringGuardable ICollectionGuardable Namespace : TeleScope.GuardClauses.Abstractions Assembly : TeleScope.GuardClauses.dll Syntax public abstract class GuardBase : object, IDefensiveGuardable, INumericGuardable, IStringGuardable, ICollectionGuardable Methods | Improve this Doc View Source All<T>(IEnumerable<T>, Func<T, Boolean>, String, String) The implementation shall check, if all elements of the input enumeration meet a predicate function. Declaration public abstract IEnumerable<T> All<T>(IEnumerable<T> input, Func<T, bool> predicate, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. Func <T, System.Boolean > predicate The test function, every element must meet. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source Contains<T>(IEnumerable<T>, T, String, String) The implementation shall check, if the input enumeration contains a specific element. Declaration public abstract IEnumerable<T> Contains<T>(IEnumerable<T> input, T item, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. T item The test item, used for compare opertations. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source ContainsNot<T>(IEnumerable<T>, T, String, String) The implementation shall check, if the input enumeration doesn't contain a specific element. Declaration public abstract IEnumerable<T> ContainsNot<T>(IEnumerable<T> input, T item, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. T item The test item, used for compare opertations. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source Equality<T>(T, T, String, String) The implementation shall check the input against an equal comparator and fail, if both instances are equal. Declaration public abstract T Equality<T>(T input, T comparator, string expression = null, string message = null) Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source False(Boolean, String, String) The implementation shall check the boolean input against False and fail, if that is the case. Declaration public abstract bool False(bool input, string expression = null, string message = null) Parameters Type Name Description System.Boolean input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.Boolean The input data, if no exception will be thrown. | Improve this Doc View Source IsExact<T>(T, T, String, String) The implementation shall check, if the input number has exactly the same value of the comparator. Declaration public abstract T IsExact<T>(T input, T comparator, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsFilled<T>(IEnumerable<T>, String, String) The implementation shall check, if all elements of the input enumeration are not null. Declaration public abstract IEnumerable<T> IsFilled<T>(IEnumerable<T> input, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsIpAddress(String, InternetProtocols, String, String) The implementation shall check, if the input string is a valid IP address. Declaration public abstract string IsIpAddress(string input, InternetProtocols protocol = InternetProtocols.IPv4, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. InternetProtocols protocol The protocol version that needs to match during the guard precedure. The default value is IPv4 . System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsLarger<T>(T, T, String, String) The implementation shall check, if the input number is larger than the comparator. Declaration public abstract T IsLarger<T>(T input, T comparator, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsLargerThanZero<T>(T, String, String) The implementation shall check, if the input number is larger than zero. Declaration public abstract T IsLargerThanZero<T>(T input, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsMailAddress(String, String, String) The implementation shall check, if the input string is a valid email address. Declaration public abstract string IsMailAddress(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsNot<T>(T, String, String, T[]) The implementation shall check, if the input number has not the same value of the comparator. Declaration public abstract T IsNot<T>(T input, string expression = null, string message = null, params T[] comparators) where T : IComparable Parameters Type Name Description T input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. T[] comparators The potential multiple instance that shall be compared by an implementation of the method. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsNotEmpty<T>(IEnumerable<T>, String, String) The implementation shall check, if the input enumeration is not empty. Declaration public abstract IEnumerable<T> IsNotEmpty<T>(IEnumerable<T> input, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsNotNullOrEmpty(String, String, String) The implementation shall check, if the input string is Null or an empty string. Declaration public abstract string IsNotNullOrEmpty(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsNotNullOrWhiteSpace(String, String, String) The implementation shall check, if the input string is Null or a whitespace. Declaration public abstract string IsNotNullOrWhiteSpace(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsNotZero<T>(T, String, String) The implementation shall check, if the input number is not zero. Declaration public abstract T IsNotZero<T>(T input, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsSmaller<T>(T, T, String, String) The implementation shall check, if the input number is smaller than the comparator. Declaration public abstract T IsSmaller<T>(T input, T comparator, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsUri(String, UriKind, String, String) The implementation shall check, if the input string is a valid Uri. Declaration public abstract string IsUri(string input, UriKind kind = null, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. UriKind kind The uri kind. The default value is . System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsWebUri(String, String, String) The implementation shall check, if the input string is a valid Uri. Declaration public abstract string IsWebUri(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source Null<T>(T, String, String) The implementation shall check the input against null and fail, if that is the case. Declaration public abstract T Null<T>(T input, string expression = null, string message = null) Parameters Type Name Description T input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source ToMailAddress(String, String, String) The implementation shall check, if the input string is a valid email address. Declaration public abstract MailAddress ToMailAddress(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description MailAddress The input data as , if no exception will be thrown. | Improve this Doc View Source ToUri(String, String, String) The implementation shall check, if the input string is a valid Uri and shall convert the value into an in a successful case. Declaration public abstract Uri ToUri(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description Uri The input data, if no exception will be thrown. | Improve this Doc View Source True(Boolean, String, String) The implementation shall check the boolean input against True and fail, if that is the case. Declaration public abstract bool True(bool input, string expression = null, string message = null) Parameters Type Name Description System.Boolean input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.Boolean The input data, if no exception will be thrown. | Improve this Doc View Source Unequality<T>(T, T, String, String) The implementation shall check the input against an unequal comparator and fail, if both instances are unequal. Declaration public abstract T Unequality<T>(T input, T comparator, string expression = null, string message = null) Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. Implements IDefensiveGuardable INumericGuardable IStringGuardable ICollectionGuardable"
  },
  "api/TeleScope.GuardClauses.Abstractions.html": {
    "href": "api/TeleScope.GuardClauses.Abstractions.html",
    "title": "Namespace TeleScope.GuardClauses.Abstractions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.GuardClauses.Abstractions Classes GuardBase This pure abstract base class implements all interfaces of guard functions in order to provide a complete set of implementations for user-defined guard classes. Interfaces ICollectionGuardable This interface provides methods for related guard clauses. The implementation of these methods should succeed, if they approve the statement of the method name. IDefensiveGuardable This interface provides methods for defensive or basic guard clauses. The implementation of these methods should fail, if they approve the statement of the method name. INumericGuardable This interface provides methods for numeric related guard clauses. The implementation of these methods should succeed, if they approve the statement of the method name. IStringGuardable This interface provides methods for string related guard clauses. The implementation of these methods should succeed, if they approve the statement of the method name."
  },
  "api/TeleScope.GuardClauses.Abstractions.ICollectionGuardable.html": {
    "href": "api/TeleScope.GuardClauses.Abstractions.ICollectionGuardable.html",
    "title": "Interface ICollectionGuardable | TeleScope Documentation",
    "keywords": "Interface ICollectionGuardable This interface provides methods for related guard clauses. The implementation of these methods should succeed, if they approve the statement of the method name. Namespace : TeleScope.GuardClauses.Abstractions Assembly : TeleScope.GuardClauses.dll Syntax public interface ICollectionGuardable Methods | Improve this Doc View Source All<T>(IEnumerable<T>, Func<T, Boolean>, String, String) The implementation shall check, if all elements of the input enumeration meet a predicate function. Declaration IEnumerable<T> All<T>(IEnumerable<T> input, Func<T, bool> predicate, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. Func <T, System.Boolean > predicate The test function, every element must meet. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source Contains<T>(IEnumerable<T>, T, String, String) The implementation shall check, if the input enumeration contains a specific element. Declaration IEnumerable<T> Contains<T>(IEnumerable<T> input, T item, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. T item The test item, used for compare opertations. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source ContainsNot<T>(IEnumerable<T>, T, String, String) The implementation shall check, if the input enumeration doesn't contain a specific element. Declaration IEnumerable<T> ContainsNot<T>(IEnumerable<T> input, T item, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. T item The test item, used for compare opertations. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsFilled<T>(IEnumerable<T>, String, String) The implementation shall check, if all elements of the input enumeration are not null. Declaration IEnumerable<T> IsFilled<T>(IEnumerable<T> input, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsNotEmpty<T>(IEnumerable<T>, String, String) The implementation shall check, if the input enumeration is not empty. Declaration IEnumerable<T> IsNotEmpty<T>(IEnumerable<T> input, string expression = null, string message = null) Parameters Type Name Description IEnumerable <T> input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description IEnumerable <T> The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test."
  },
  "api/TeleScope.GuardClauses.Abstractions.IDefensiveGuardable.html": {
    "href": "api/TeleScope.GuardClauses.Abstractions.IDefensiveGuardable.html",
    "title": "Interface IDefensiveGuardable | TeleScope Documentation",
    "keywords": "Interface IDefensiveGuardable This interface provides methods for defensive or basic guard clauses. The implementation of these methods should fail, if they approve the statement of the method name. Namespace : TeleScope.GuardClauses.Abstractions Assembly : TeleScope.GuardClauses.dll Syntax public interface IDefensiveGuardable Methods | Improve this Doc View Source Equality<T>(T, T, String, String) The implementation shall check the input against an equal comparator and fail, if both instances are equal. Declaration T Equality<T>(T input, T comparator, string expression = null, string message = null) Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source False(Boolean, String, String) The implementation shall check the boolean input against False and fail, if that is the case. Declaration bool False(bool input, string expression = null, string message = null) Parameters Type Name Description System.Boolean input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.Boolean The input data, if no exception will be thrown. | Improve this Doc View Source Null<T>(T, String, String) The implementation shall check the input against null and fail, if that is the case. Declaration T Null<T>(T input, string expression = null, string message = null) Parameters Type Name Description T input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source True(Boolean, String, String) The implementation shall check the boolean input against True and fail, if that is the case. Declaration bool True(bool input, string expression = null, string message = null) Parameters Type Name Description System.Boolean input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.Boolean The input data, if no exception will be thrown. | Improve this Doc View Source Unequality<T>(T, T, String, String) The implementation shall check the input against an unequal comparator and fail, if both instances are unequal. Declaration T Unequality<T>(T input, T comparator, string expression = null, string message = null) Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test."
  },
  "api/TeleScope.GuardClauses.Abstractions.INumericGuardable.html": {
    "href": "api/TeleScope.GuardClauses.Abstractions.INumericGuardable.html",
    "title": "Interface INumericGuardable | TeleScope Documentation",
    "keywords": "Interface INumericGuardable This interface provides methods for numeric related guard clauses. The implementation of these methods should succeed, if they approve the statement of the method name. Namespace : TeleScope.GuardClauses.Abstractions Assembly : TeleScope.GuardClauses.dll Syntax public interface INumericGuardable Methods | Improve this Doc View Source IsExact<T>(T, T, String, String) The implementation shall check, if the input number has exactly the same value of the comparator. Declaration T IsExact<T>(T input, T comparator, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsLarger<T>(T, T, String, String) The implementation shall check, if the input number is larger than the comparator. Declaration T IsLarger<T>(T input, T comparator, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsLargerThanZero<T>(T, String, String) The implementation shall check, if the input number is larger than zero. Declaration T IsLargerThanZero<T>(T input, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsNot<T>(T, String, String, T[]) The implementation shall check, if the input number has not the same value of the comparator. Declaration T IsNot<T>(T input, string expression = null, string message = null, params T[] comparators) where T : IComparable Parameters Type Name Description T input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. T[] comparators The potential multiple instance that shall be compared by an implementation of the method. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsNotZero<T>(T, String, String) The implementation shall check, if the input number is not zero. Declaration T IsNotZero<T>(T input, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test. | Improve this Doc View Source IsSmaller<T>(T, T, String, String) The implementation shall check, if the input number is smaller than the comparator. Declaration T IsSmaller<T>(T input, T comparator, string expression = null, string message = null) where T : IComparable Parameters Type Name Description T input The instance under test. T comparator The instance that shall be compared by an implementation of the method. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description T The input data, if no exception will be thrown. Type Parameters Name Description T The type param under test."
  },
  "api/TeleScope.GuardClauses.Abstractions.IStringGuardable.html": {
    "href": "api/TeleScope.GuardClauses.Abstractions.IStringGuardable.html",
    "title": "Interface IStringGuardable | TeleScope Documentation",
    "keywords": "Interface IStringGuardable This interface provides methods for string related guard clauses. The implementation of these methods should succeed, if they approve the statement of the method name. Namespace : TeleScope.GuardClauses.Abstractions Assembly : TeleScope.GuardClauses.dll Syntax public interface IStringGuardable Methods | Improve this Doc View Source IsIpAddress(String, InternetProtocols, String, String) The implementation shall check, if the input string is a valid IP address. Declaration string IsIpAddress(string input, InternetProtocols protocol = InternetProtocols.IPv4, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. InternetProtocols protocol The protocol version that needs to match during the guard precedure. The default value is IPv4 . System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsMailAddress(String, String, String) The implementation shall check, if the input string is a valid email address. Declaration string IsMailAddress(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsNotNullOrEmpty(String, String, String) The implementation shall check, if the input string is Null or an empty string. Declaration string IsNotNullOrEmpty(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsNotNullOrWhiteSpace(String, String, String) The implementation shall check, if the input string is Null or a whitespace. Declaration string IsNotNullOrWhiteSpace(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsUri(String, UriKind, String, String) The implementation shall check, if the input string is a valid Uri. Declaration string IsUri(string input, UriKind kind = null, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. UriKind kind The uri kind. The default value is . System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source IsWebUri(String, String, String) The implementation shall check, if the input string is a valid Uri. Declaration string IsWebUri(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description System.String The input data, if no exception will be thrown. | Improve this Doc View Source ToMailAddress(String, String, String) The implementation shall check, if the input string is a valid email address. Declaration MailAddress ToMailAddress(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description MailAddress The input data as , if no exception will be thrown. | Improve this Doc View Source ToUri(String, String, String) The implementation shall check, if the input string is a valid Uri and shall convert the value into an in a successful case. Declaration Uri ToUri(string input, string expression = null, string message = null) Parameters Type Name Description System.String input The instance under test. System.String expression The optional parameter name under test. System.String message The optional exception message that wil be used, if the method implementation throws. Returns Type Description Uri The input data as , if no exception will be thrown."
  },
  "api/TeleScope.GuardClauses.Enumerations.html": {
    "href": "api/TeleScope.GuardClauses.Enumerations.html",
    "title": "Namespace TeleScope.GuardClauses.Enumerations | TeleScope Documentation",
    "keywords": "Namespace TeleScope.GuardClauses.Enumerations Enums InternetProtocols This enumeration is used to specify the IP version for guarding IP strings. It is used in classes, based on the IStringGuardable interface. The .NET build-in enumerations are not used in order to prevent false parameter settings."
  },
  "api/TeleScope.GuardClauses.Enumerations.InternetProtocols.html": {
    "href": "api/TeleScope.GuardClauses.Enumerations.InternetProtocols.html",
    "title": "Enum InternetProtocols | TeleScope Documentation",
    "keywords": "Enum InternetProtocols This enumeration is used to specify the IP version for guarding IP strings. It is used in classes, based on the IStringGuardable interface. The .NET build-in enumerations are not used in order to prevent false parameter settings. Namespace : TeleScope.GuardClauses.Enumerations Assembly : TeleScope.GuardClauses.dll Syntax public enum InternetProtocols : int Fields Name Description IPv4 Internet Protocol version 4. IPv6 Internet Protocol version 6."
  },
  "api/TeleScope.GuardClauses.Guard.html": {
    "href": "api/TeleScope.GuardClauses.Guard.html",
    "title": "Class Guard | TeleScope Documentation",
    "keywords": "Class Guard The static class is the front door to all guard clauses that are provided via separate interfaces. Inheritance System.Object Guard Namespace : TeleScope.GuardClauses Assembly : TeleScope.GuardClauses.dll Syntax public static class Guard : object Properties | Improve this Doc View Source Against Gets methods of guard clauses that are related to defensiv or basic statements. Declaration public static IDefensiveGuardable Against { get; } Property Value Type Description IDefensiveGuardable | Improve this Doc View Source Collection Gets methods of guard clauses that are related to collections. Declaration public static ICollectionGuardable Collection { get; } Property Value Type Description ICollectionGuardable | Improve this Doc View Source Numeric Gets methods of guard clauses that are related to numerics. Declaration public static INumericGuardable Numeric { get; } Property Value Type Description INumericGuardable | Improve this Doc View Source String Gets methods of guard clauses that are related to strings. Declaration public static IStringGuardable String { get; } Property Value Type Description IStringGuardable Methods | Improve this Doc View Source Provide() Calling this method will access the internal GuardProvider that stores the implemented guard clauses. Declaration public static GuardProvider Provide() Returns Type Description GuardProvider The internal static instance of type GuardProvider ."
  },
  "api/TeleScope.GuardClauses.GuardProvider.html": {
    "href": "api/TeleScope.GuardClauses.GuardProvider.html",
    "title": "Class GuardProvider | TeleScope Documentation",
    "keywords": "Class GuardProvider This class collects all implementations of the different interfaces that provide guard clause functionalities. The provider class is used by the static class Guard that provides access to the implementations. Inheritance System.Object GuardProvider Namespace : TeleScope.GuardClauses Assembly : TeleScope.GuardClauses.dll Syntax public sealed class GuardProvider : object Constructors | Improve this Doc View Source GuardProvider() The default empty constructor implements the TeleScope.GuardClauses.DefaultGuard class. Declaration public GuardProvider() | Improve this Doc View Source GuardProvider(GuardBase) This constructor takes an implemenation of type TeleScope.GuardClauses.DefaultGuard and stores it internally. Declaration public GuardProvider(GuardBase guard) Parameters Type Name Description GuardBase guard The implementation of guard functions. Methods | Improve this Doc View Source New(GuardBase) Adds a new instance that implements the full set of guard functionalities derived from GuardBase . Declaration public void New(GuardBase guard) Parameters Type Name Description GuardBase guard The implementation of guard functions. | Improve this Doc View Source New(ICollectionGuardable) Adds a new instance that implements a partial set of guard functionalities from ICollectionGuardable . Declaration public void New(ICollectionGuardable collectionGuard) Parameters Type Name Description ICollectionGuardable collectionGuard The implementation of guard functions. | Improve this Doc View Source New(IDefensiveGuardable) Adds a new instance that implements a partial set of guard functionalities from IDefensiveGuardable . Declaration public void New(IDefensiveGuardable guard) Parameters Type Name Description IDefensiveGuardable guard The implementation of guard functions. | Improve this Doc View Source New(INumericGuardable) Adds a new instance that implements a partial set of guard functionalities from INumericGuardable . Declaration public void New(INumericGuardable numericGuard) Parameters Type Name Description INumericGuardable numericGuard The implementation of guard functions. | Improve this Doc View Source New(IStringGuardable) Adds a new instance that implements a partial set of guard functionalities from IStringGuardable . Declaration public void New(IStringGuardable stringGuard) Parameters Type Name Description IStringGuardable stringGuard The implementation of guard functions."
  },
  "api/TeleScope.GuardClauses.html": {
    "href": "api/TeleScope.GuardClauses.html",
    "title": "Namespace TeleScope.GuardClauses | TeleScope Documentation",
    "keywords": "Namespace TeleScope.GuardClauses Classes Guard The static class is the front door to all guard clauses that are provided via separate interfaces. GuardProvider This class collects all implementations of the different interfaces that provide guard clause functionalities. The provider class is used by the static class Guard that provides access to the implementations."
  },
  "api/TeleScope.Logging.Extensions.html": {
    "href": "api/TeleScope.Logging.Extensions.html",
    "title": "Namespace TeleScope.Logging.Extensions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Logging.Extensions Classes ILoggerExtensions This extension class shortens log method calls."
  },
  "api/TeleScope.Logging.Extensions.ILoggerExtensions.html": {
    "href": "api/TeleScope.Logging.Extensions.ILoggerExtensions.html",
    "title": "Class ILoggerExtensions | TeleScope Documentation",
    "keywords": "Class ILoggerExtensions This extension class shortens log method calls. Inheritance System.Object ILoggerExtensions Namespace : TeleScope.Logging.Extensions Assembly : TeleScope.Logging.dll Syntax public static class ILoggerExtensions : object Methods | Improve this Doc View Source Critical(ILogger, Exception) Writes a critical message. Declaration public static void Critical(this ILogger logger, Exception ex) Parameters Type Name Description ILogger logger The calling instance. Exception ex The exception that will to be logged. | Improve this Doc View Source Critical(ILogger, Exception, String, Object[]) Writes a critical message. Declaration public static void Critical(this ILogger logger, Exception ex, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. Exception ex The exception that will to be logged. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Critical(ILogger, Object) Writes a critical message. Declaration public static void Critical(this ILogger logger, object data) Parameters Type Name Description ILogger logger The calling instance. System.Object data A data object whose string representation will be logged. | Improve this Doc View Source Critical(ILogger, String, Object[]) Writes a critical message. Declaration public static void Critical(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Debug(ILogger, Exception, String, Object[]) Writes a debug message. Declaration public static void Debug(this ILogger logger, Exception ex, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. Exception ex The exception that will to be logged. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Debug(ILogger, Object) Writes a debug message. Declaration public static void Debug(this ILogger logger, object data) Parameters Type Name Description ILogger logger The calling instance. System.Object data A data object whose string representation will be logged. | Improve this Doc View Source Debug(ILogger, String, Object[]) Writes a debug message. Declaration public static void Debug(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Error(ILogger, Exception, String, Object[]) Writes an error message. Declaration public static void Error(this ILogger logger, Exception ex, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. Exception ex The exception that will to be logged. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Error(ILogger, Object) Writes an error message. Declaration public static void Error(this ILogger logger, object data) Parameters Type Name Description ILogger logger The calling instance. System.Object data A data object whose string representation will be logged. | Improve this Doc View Source Error(ILogger, String, Object[]) Writes an error message. Declaration public static void Error(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Info(ILogger, Exception, String, Object[]) Writes a info message. Declaration public static void Info(this ILogger logger, Exception ex, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. Exception ex The exception that will to be logged. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Info(ILogger, Object) Writes a info message. Declaration public static void Info(this ILogger logger, object data) Parameters Type Name Description ILogger logger The calling instance. System.Object data A data object whose string representation will be logged. | Improve this Doc View Source Info(ILogger, String, Object[]) Writes a info message. Declaration public static void Info(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Trace(ILogger, Exception, String, Object[]) Writes a trace message. Declaration public static void Trace(this ILogger logger, Exception ex, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. Exception ex The exception that will to be logged. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Trace(ILogger, Object) Writes a trace message. Declaration public static void Trace(this ILogger logger, object data) Parameters Type Name Description ILogger logger The calling instance. System.Object data A data object whose string representation will be logged. | Improve this Doc View Source Trace(ILogger, String, Object[]) Writes a trace message. Declaration public static void Trace(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source TraceMember(ILogger, String) Writes a trace message with the calling member. Declaration public static void TraceMember(this ILogger logger, string memberName = \"\") Parameters Type Name Description ILogger logger The calling instance. System.String memberName The client-side message that contains the calling member name. | Improve this Doc View Source Warn(ILogger, Exception, String, Object[]) Writes a warning message. Declaration public static void Warn(this ILogger logger, Exception ex, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. Exception ex The exception that will to be logged. System.String message The client-side message. System.Object [] args An array of objects that will to be logged. | Improve this Doc View Source Warn(ILogger, Object) Writes a warning message. Declaration public static void Warn(this ILogger logger, object data) Parameters Type Name Description ILogger logger The calling instance. System.Object data A data object whose string representation will be logged. | Improve this Doc View Source Warn(ILogger, String, Object[]) Writes a warning message. Declaration public static void Warn(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. System.String message The client-side message. System.Object [] args An array of objects that will to be logged."
  },
  "api/TeleScope.Logging.Extensions.Serilog.html": {
    "href": "api/TeleScope.Logging.Extensions.Serilog.html",
    "title": "Namespace TeleScope.Logging.Extensions.Serilog | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Logging.Extensions.Serilog Classes ILoggerFactoryExtensions This extension class provides methods simplify the configuration of Microsofts ILoggerFactory ."
  },
  "api/TeleScope.Logging.Extensions.Serilog.ILoggerFactoryExtensions.html": {
    "href": "api/TeleScope.Logging.Extensions.Serilog.ILoggerFactoryExtensions.html",
    "title": "Class ILoggerFactoryExtensions | TeleScope Documentation",
    "keywords": "Class ILoggerFactoryExtensions This extension class provides methods simplify the configuration of Microsofts ILoggerFactory . Inheritance System.Object ILoggerFactoryExtensions Namespace : TeleScope.Logging.Extensions.Serilog Assembly : TeleScope.Logging.Extensions.Serilog.dll Syntax public static class ILoggerFactoryExtensions : object Methods | Improve this Doc View Source AddSerilogConsole(ILoggerFactory) Adds the console sink to the logger factory. Declaration public static ILoggerFactory AddSerilogConsole(this ILoggerFactory factory) Parameters Type Name Description ILoggerFactory factory The calling instance. Returns Type Description ILoggerFactory The calling instance. | Improve this Doc View Source AddSerilogFile(ILoggerFactory, String) Adds the file sink to the logger factory. Declaration public static ILoggerFactory AddSerilogFile(this ILoggerFactory factory, string file) Parameters Type Name Description ILoggerFactory factory The calling instance. System.String file The file, where the log will be stored. Returns Type Description ILoggerFactory The calling instance. | Improve this Doc View Source UseFormatter(ILoggerFactory, ITextFormatter) Applies a different text formatter for the logging of object data. The following sample shows that the default formatter from Serilog is the CompactJsonFormatter . private static ITextFormatter textFormatter = new CompactJsonFormatter(); Declaration public static ILoggerFactory UseFormatter(this ILoggerFactory factory, ITextFormatter formatter) Parameters Type Name Description ILoggerFactory factory The calling instance. ITextFormatter formatter Returns Type Description ILoggerFactory The calling instance. | Improve this Doc View Source UseLevel(ILoggerFactory, LogLevel) Applies a minimum log level. Declaration public static ILoggerFactory UseLevel(this ILoggerFactory factory, LogLevel minimumLevel) Parameters Type Name Description ILoggerFactory factory The calling instance. LogLevel minimumLevel The minumum log level as enum LogLevel. Returns Type Description ILoggerFactory The calling instance. | Improve this Doc View Source UseTemplate(ILoggerFactory, String) Applies a template string to structure log messages. The following sample shows how the default template is structured. {Timestamp:yyyy-MM-dd HH:mm:ss} [{Level}] [{SourceContext:l}] {Message}{NewLine}{Exception} Declaration public static ILoggerFactory UseTemplate(this ILoggerFactory factory, string newTemplate) Parameters Type Name Description ILoggerFactory factory The calling instance. System.String newTemplate The new template string. Returns Type Description ILoggerFactory The calling instance."
  },
  "api/TeleScope.Logging.html": {
    "href": "api/TeleScope.Logging.html",
    "title": "Namespace TeleScope.Logging | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Logging Classes LoggingProvider The static class provides an easy-to-use API to inject the and to use provided loggers on client-side code."
  },
  "api/TeleScope.Logging.LoggingProvider.html": {
    "href": "api/TeleScope.Logging.LoggingProvider.html",
    "title": "Class LoggingProvider | TeleScope Documentation",
    "keywords": "Class LoggingProvider The static class provides an easy-to-use API to inject the and to use provided loggers on client-side code. Inheritance System.Object LoggingProvider Namespace : TeleScope.Logging Assembly : TeleScope.Logging.dll Syntax public static class LoggingProvider : object Methods | Improve this Doc View Source CreateLogger(String) Get a logger from the internal logger factory and use a name to tag the source. Declaration public static ILogger CreateLogger(string name) Parameters Type Name Description System.String name The name tags the source of the log messages. Returns Type Description ILogger The concrete logger. | Improve this Doc View Source CreateLogger(Type) Get a logger from the internal logger factory and use a instance to tag the source. Declaration public static ILogger CreateLogger(Type type) Parameters Type Name Description Type type The type tags the source of the log messages. Returns Type Description ILogger The concrete logger. | Improve this Doc View Source CreateLogger<T>() Get a logger from the internal logger factory and use a generic type to tag the source. Declaration public static ILogger<T> CreateLogger<T>() Returns Type Description ILogger <T> The concrete logger. Type Parameters Name Description T The generic type T tags the source of the log messages. | Improve this Doc View Source Initialize(ILoggerFactory) Stores the given logger factory that provides loggers via the provided CreateLogger methods. If the parameter is null the is used internally. Declaration public static void Initialize(ILoggerFactory loggerFactory) Parameters Type Name Description ILoggerFactory loggerFactory The logger factory that will provide concrete loggers."
  },
  "api/TeleScope.Logging.Metrics.Abstractions.html": {
    "href": "api/TeleScope.Logging.Metrics.Abstractions.html",
    "title": "Namespace TeleScope.Logging.Metrics.Abstractions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Logging.Metrics.Abstractions Interfaces IMetric The interface provides properties that represent the metrics that shall be measured at runtime. The Implementation shall start measuring automatically after instanciation and shall stop manually or when the instance gets disposed."
  },
  "api/TeleScope.Logging.Metrics.Abstractions.IMetric.html": {
    "href": "api/TeleScope.Logging.Metrics.Abstractions.IMetric.html",
    "title": "Interface IMetric | TeleScope Documentation",
    "keywords": "Interface IMetric The interface provides properties that represent the metrics that shall be measured at runtime. The Implementation shall start measuring automatically after instanciation and shall stop manually or when the instance gets disposed. Namespace : TeleScope.Logging.Metrics.Abstractions Assembly : TeleScope.Logging.Metrics.dll Syntax public interface IMetric : IDisposable Properties | Improve this Doc View Source AllocatedBytes The implementation shall get the allocated bytes between autostart and stop. Declaration long AllocatedBytes { get; } Property Value Type Description System.Int64 | Improve this Doc View Source EllapsedMilliseconds The implementation shall get the ellapsed milliseconds between autostart and stop. Declaration long EllapsedMilliseconds { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Stop() The implementation shall stop all measurements and provide the data through the properties. Declaration void Stop()"
  },
  "api/TeleScope.Logging.Metrics.Extensions.html": {
    "href": "api/TeleScope.Logging.Metrics.Extensions.html",
    "title": "Namespace TeleScope.Logging.Metrics.Extensions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Logging.Metrics.Extensions Classes ILoggerExtensions This extension class shortens log method calls."
  },
  "api/TeleScope.Logging.Metrics.Extensions.ILoggerExtensions.html": {
    "href": "api/TeleScope.Logging.Metrics.Extensions.ILoggerExtensions.html",
    "title": "Class ILoggerExtensions | TeleScope Documentation",
    "keywords": "Class ILoggerExtensions This extension class shortens log method calls. Inheritance System.Object ILoggerExtensions Namespace : TeleScope.Logging.Metrics.Extensions Assembly : TeleScope.Logging.Metrics.dll Syntax public static class ILoggerExtensions : object Methods | Improve this Doc View Source Metrics(ILogger, LogLevel, Boolean, String, Object[]) Writes the metrics execution time and total memory usage to the logger. Declaration public static IDisposable Metrics(this ILogger logger, LogLevel level, bool forceGarbageCollection, string message, params object[] args) Parameters Type Name Description ILogger logger The calling instance. LogLevel level The minimum log level for logging the metrics. System.Boolean forceGarbageCollection Determines if the will perform a full memory collection or not. System.String message The client-side message. System.Object [] args Optional data arguments that should appear in the message. Returns Type Description IDisposable The metrics instance as . | Improve this Doc View Source Metrics(ILogger, String) Writes the metrics execution time and total memory usage to the logger. The is set to . The will not be forced to perform a full memory collection in order to optimize the execution time. Declaration public static IDisposable Metrics(this ILogger logger, string message = \"\") Parameters Type Name Description ILogger logger The calling instance. System.String message The client-side message that contains the calling member name. If not present the message will only contain the name of the calling member . Returns Type Description IDisposable The metrics instance as ."
  },
  "api/TeleScope.Logging.Metrics.html": {
    "href": "api/TeleScope.Logging.Metrics.html",
    "title": "Namespace TeleScope.Logging.Metrics | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Logging.Metrics Classes MetricProvider This static class provides new metric instances that will start immediately."
  },
  "api/TeleScope.Logging.Metrics.MetricProvider.html": {
    "href": "api/TeleScope.Logging.Metrics.MetricProvider.html",
    "title": "Class MetricProvider | TeleScope Documentation",
    "keywords": "Class MetricProvider This static class provides new metric instances that will start immediately. Inheritance System.Object MetricProvider Namespace : TeleScope.Logging.Metrics Assembly : TeleScope.Logging.Metrics.dll Syntax public static class MetricProvider : object Methods | Improve this Doc View Source StartNew(Boolean) Starts new metrics with or without full memory collection and without internal logging. Declaration public static IMetric StartNew(bool forceMemoryCollection = false) Parameters Type Name Description System.Boolean forceMemoryCollection Returns Type Description IMetric The new instance that is already measuring the metrics. | Improve this Doc View Source StartNew(Boolean, ILogger, LogLevel, String, Object[]) Starts new metrics with a logger as information sink. Declaration public static IMetric StartNew(bool forceMemoryCollection, ILogger logger, LogLevel logLevel, string message, params object[] args) Parameters Type Name Description System.Boolean forceMemoryCollection Determines if the will perform a full memory collection or not. ILogger logger The logger sink. LogLevel logLevel The minimum log level for logging the metrics. System.String message The client-side message. System.Object [] args Optional data arguments that should appear in the message. Returns Type Description IMetric The new instance that is already measuring the metrics."
  },
  "api/TeleScope.Persistence.Abstractions.Enumerations.html": {
    "href": "api/TeleScope.Persistence.Abstractions.Enumerations.html",
    "title": "Namespace TeleScope.Persistence.Abstractions.Enumerations | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Abstractions.Enumerations Enums WritePermissions The enum contains the permissions to manipulate (file) storages in terms of writing operations."
  },
  "api/TeleScope.Persistence.Abstractions.Enumerations.WritePermissions.html": {
    "href": "api/TeleScope.Persistence.Abstractions.Enumerations.WritePermissions.html",
    "title": "Enum WritePermissions | TeleScope Documentation",
    "keywords": "Enum WritePermissions The enum contains the permissions to manipulate (file) storages in terms of writing operations. Namespace : TeleScope.Persistence.Abstractions.Enumerations Assembly : TeleScope.Persistence.Abstractions.dll Syntax public enum WritePermissions : int Fields Name Description Create Permission to write and create new storages. Delete Permission to write and delete storages. None No permission to write at all."
  },
  "api/TeleScope.Persistence.Abstractions.Extensions.html": {
    "href": "api/TeleScope.Persistence.Abstractions.Extensions.html",
    "title": "Namespace TeleScope.Persistence.Abstractions.Extensions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Abstractions.Extensions Classes IWritableExtensions This extension class extends the IWritable<T> interface with common functions. It provides shared logic for implementations across the persistence layer."
  },
  "api/TeleScope.Persistence.Abstractions.Extensions.IWritableExtensions.html": {
    "href": "api/TeleScope.Persistence.Abstractions.Extensions.IWritableExtensions.html",
    "title": "Class IWritableExtensions | TeleScope Documentation",
    "keywords": "Class IWritableExtensions This extension class extends the IWritable<T> interface with common functions. It provides shared logic for implementations across the persistence layer. Inheritance System.Object IWritableExtensions Namespace : TeleScope.Persistence.Abstractions.Extensions Assembly : TeleScope.Persistence.Abstractions.dll Syntax public static class IWritableExtensions : object Methods | Improve this Doc View Source ValidateOrThrow<T>(IWritable<T>, IEnumerable<T>, FileInfo) Validates the permissions to create and delete of the calling instance and returns a true if the process should continue or false if not. In case that the permissions were violated an is thrown. Declaration public static bool ValidateOrThrow<T>(this IWritable<T> writer, IEnumerable<T> data, FileInfo info) Parameters Type Name Description IWritable <T> writer The calling instance. IEnumerable <T> data The data of the calling instance. FileInfo info The file informations that are used to delete or create files. Returns Type Description System.Boolean Type Parameters Name Description T The data type of the data."
  },
  "api/TeleScope.Persistence.Abstractions.FileSetupBase.html": {
    "href": "api/TeleScope.Persistence.Abstractions.FileSetupBase.html",
    "title": "Class FileSetupBase | TeleScope Documentation",
    "keywords": "Class FileSetupBase This abstract base class provides properties and a default constructor signature for concrete file setup classes. Inheritance System.Object FileSetupBase CsvStorageSetup JsonStorageSetup ParquetStorageSetup YamlStorageSetup Namespace : TeleScope.Persistence.Abstractions Assembly : TeleScope.Persistence.Abstractions.dll Syntax public abstract class FileSetupBase : object Constructors | Improve this Doc View Source FileSetupBase(FileInfo, WritePermissions) The constructor sets the file propterties and the WritePermissions . Declaration protected FileSetupBase(FileInfo fileInfo, WritePermissions permissions = default(WritePermissions)) Parameters Type Name Description FileInfo fileInfo The information about the file that will get accessed by a file storage. WritePermissions permissions The information about the write permissions. | Improve this Doc View Source FileSetupBase(String, WritePermissions) The constructor sets the file propterties and the WritePermissions . Declaration protected FileSetupBase(string file, WritePermissions permissions = default(WritePermissions)) Parameters Type Name Description System.String file The file that will get accessed by a file storage. WritePermissions permissions The information about the write permissions. Properties | Improve this Doc View Source Exists Gets the information if the file info instance exists or not. Declaration public bool Exists { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Extension Gets the extension or type of the file. Declaration public string Extension { get; } Property Value Type Description System.String | Improve this Doc View Source File Gets the complete filenmane with path and the extension of the file. Declaration public string File { get; } Property Value Type Description System.String | Improve this Doc View Source Filename Gets the name of the file. Declaration public string Filename { get; } Property Value Type Description System.String | Improve this Doc View Source Location Gets the complete path, where the file is located. Declaration public string Location { get; } Property Value Type Description System.String | Improve this Doc View Source Permissions Gets the flags of permissions how files may be treated. Declaration public WritePermissions Permissions { get; set; } Property Value Type Description WritePermissions Methods | Improve this Doc View Source Info() Gets the reference to the FileInfo object, that was given to the constructor. Declaration public FileInfo Info() Returns Type Description FileInfo | Improve this Doc View Source SetFile(FileInfo) Sets or updates the reference to the FileInfo object. Declaration public void SetFile(FileInfo fileInfo) Parameters Type Name Description FileInfo fileInfo The new FileInfo object."
  },
  "api/TeleScope.Persistence.Abstractions.Handlers.html": {
    "href": "api/TeleScope.Persistence.Abstractions.Handlers.html",
    "title": "Namespace TeleScope.Persistence.Abstractions.Handlers | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Abstractions.Handlers Delegates PersistenceHandler<Tin, Tout> The delegate provides a generic approach to parse data structures for incoming or outgoing dataflows."
  },
  "api/TeleScope.Persistence.Abstractions.Handlers.PersistenceHandler-2.html": {
    "href": "api/TeleScope.Persistence.Abstractions.Handlers.PersistenceHandler-2.html",
    "title": "Delegate PersistenceHandler<Tin, Tout> | TeleScope Documentation",
    "keywords": "Delegate PersistenceHandler<Tin, Tout> The delegate provides a generic approach to parse data structures for incoming or outgoing dataflows. Namespace : TeleScope.Persistence.Abstractions.Handlers Assembly : TeleScope.Persistence.Abstractions.dll Syntax public delegate Tout PersistenceHandler<in Tin, out Tout>(Tin item, int index = 0, int length = 1); Parameters Type Name Description Tin item The current item. System.Int32 index The index of the element. If there is only a single instance the value is 0. System.Int32 length The length of the collection. If there is only a single instance the value is 1. Returns Type Description Tout Type Parameters Name Description Tin The incoming type. Tout The outgoing type."
  },
  "api/TeleScope.Persistence.Abstractions.html": {
    "href": "api/TeleScope.Persistence.Abstractions.html",
    "title": "Namespace TeleScope.Persistence.Abstractions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Abstractions Classes FileSetupBase This abstract base class provides properties and a default constructor signature for concrete file setup classes. Interfaces IFileWritable<T> This interface provides a generic approach to write generic data to a file based data sink. The interface inherits from IWritable<T> IParsable<Tout> This interface provides a generic approach to parse data structures for incoming or outgoing dataflows within the IReadable<T> and IWritable<T> implementations. IReadable<T> This interface provides a minimalistic generic approach to read data from any kind of (persistent) data source. IWritable<T> This interface provides a minimalistic generic approach to write generic data to any kind of (persistent) data sink."
  },
  "api/TeleScope.Persistence.Abstractions.IFileWritable-1.html": {
    "href": "api/TeleScope.Persistence.Abstractions.IFileWritable-1.html",
    "title": "Interface IFileWritable<T> | TeleScope Documentation",
    "keywords": "Interface IFileWritable<T> This interface provides a generic approach to write generic data to a file based data sink. The interface inherits from IWritable<T> Inherited Members IWritable<T>.Permissions IWritable<T>.Write(IEnumerable<T>) IWritable<T>.HasPermission(WritePermissions) Namespace : TeleScope.Persistence.Abstractions Assembly : TeleScope.Persistence.Abstractions.dll Syntax public interface IFileWritable<T> : IWritable<T> Type Parameters Name Description T The type that is given on the application side. Methods | Improve this Doc View Source Update(FileInfo) Updates the file information to change the file sink after instanciation process. Declaration IFileWritable<T> Update(FileInfo fileInfo) Parameters Type Name Description FileInfo fileInfo The file information object. Returns Type Description IFileWritable <T> The calling instance. | Improve this Doc View Source Update(String) Updates the file information to change the file sink after instanciation process. Declaration IFileWritable<T> Update(string file) Parameters Type Name Description System.String file The file information object. Returns Type Description IFileWritable <T> The calling instance. Extension Methods IWritableExtensions.ValidateOrThrow<T>(IWritable<T>, IEnumerable<T>, FileInfo)"
  },
  "api/TeleScope.Persistence.Abstractions.IParsable-1.html": {
    "href": "api/TeleScope.Persistence.Abstractions.IParsable-1.html",
    "title": "Interface IParsable<Tout> | TeleScope Documentation",
    "keywords": "Interface IParsable<Tout> This interface provides a generic approach to parse data structures for incoming or outgoing dataflows within the IReadable<T> and IWritable<T> implementations. Namespace : TeleScope.Persistence.Abstractions Assembly : TeleScope.Persistence.Abstractions.dll Syntax public interface IParsable<out Tout> Type Parameters Name Description Tout The resulting type after parsing process. Methods | Improve this Doc View Source Parse<Tin>(Tin, Int32, Int32) Parses the input data intor the output data with optional additional information if the data objects are stored in a collection. Declaration Tout Parse<Tin>(Tin input, int index = 0, int length = 1) Parameters Type Name Description Tin input The input data. System.Int32 index The index of the data instance. If the instance is part of a collection this value increases above zero. System.Int32 length The length of the data collection. If the instance is part of a collection this value is greater than one. Returns Type Description Tout The output data. Type Parameters Name Description Tin The incoming type before the parsing process."
  },
  "api/TeleScope.Persistence.Abstractions.IReadable-1.html": {
    "href": "api/TeleScope.Persistence.Abstractions.IReadable-1.html",
    "title": "Interface IReadable<T> | TeleScope Documentation",
    "keywords": "Interface IReadable<T> This interface provides a minimalistic generic approach to read data from any kind of (persistent) data source. Namespace : TeleScope.Persistence.Abstractions Assembly : TeleScope.Persistence.Abstractions.dll Syntax public interface IReadable<out T> Type Parameters Name Description T The type that is desired on the application side. Methods | Improve this Doc View Source Read() Reads a given data source and provides a collection of type T. If there is only one data object a collection with the length one is returned. Declaration IEnumerable<T> Read() Returns Type Description IEnumerable <T> The resulting data objects of type T."
  },
  "api/TeleScope.Persistence.Abstractions.IWritable-1.html": {
    "href": "api/TeleScope.Persistence.Abstractions.IWritable-1.html",
    "title": "Interface IWritable<T> | TeleScope Documentation",
    "keywords": "Interface IWritable<T> This interface provides a minimalistic generic approach to write generic data to any kind of (persistent) data sink. Namespace : TeleScope.Persistence.Abstractions Assembly : TeleScope.Persistence.Abstractions.dll Syntax public interface IWritable<in T> Type Parameters Name Description T The type that is given on the application side. Properties | Improve this Doc View Source Permissions Gets the flags of permissions how files may be treated. Declaration WritePermissions Permissions { get; } Property Value Type Description WritePermissions Methods | Improve this Doc View Source HasPermission(WritePermissions) Shall check, if the implementation has the permission handed over as parameter. Declaration bool HasPermission(WritePermissions permission) Parameters Type Name Description WritePermissions permission The permission that will be testet. Returns Type Description System.Boolean True if the permission flags are present, otherwise false. | Improve this Doc View Source Write(IEnumerable<T>) Writes a collection of type T to a given data sink. If there is only one data object there is the need to provide a collection with one element. Declaration void Write(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data The application-side data collection of type T. Extension Methods IWritableExtensions.ValidateOrThrow<T>(IWritable<T>, IEnumerable<T>, FileInfo)"
  },
  "api/TeleScope.Persistence.Csv.CsvStorage-1.html": {
    "href": "api/TeleScope.Persistence.Csv.CsvStorage-1.html",
    "title": "Class CsvStorage<T> | TeleScope Documentation",
    "keywords": "Class CsvStorage<T> This class provides access to CSV files (charcater separated values) and parses the data into the application-side type T. Inheritance System.Object CsvStorage<T> Implements IReadable <T> IFileWritable <T> IWritable <T> Namespace : TeleScope.Persistence.Csv Assembly : TeleScope.Persistence.Csv.dll Syntax public class CsvStorage<T> : object, IReadable<T>, IFileWritable<T>, IWritable<T> Type Parameters Name Description T The type T is used application-side and can be read from the data source or be written to the data sink. Constructors | Improve this Doc View Source CsvStorage(String) The constructor takes the file string as input parameter, creates the CsvStorageSetup and allows to config the properties afterwards. Declaration public CsvStorage(string file) Parameters Type Name Description System.String file The specific CSV file that the storage is related to. | Improve this Doc View Source CsvStorage(CsvStorageSetup) The constructor takes the setup of type CsvStorageSetup as input parameter and binds the logging mechanism. Declaration public CsvStorage(CsvStorageSetup csvSetup) Parameters Type Name Description CsvStorageSetup csvSetup The setup is needed to work with a specific CSV file. Properties | Improve this Doc View Source OnItemRead The delegate handles the read operation of a CSV line and returned the targeted internal type. Declaration public PersistenceHandler<string[], T> OnItemRead { set; } Property Value Type Description PersistenceHandler < System.String [], T> | Improve this Doc View Source OnItemWrite The delegate handles the write operation to a CSV to a string array that represents a line. The input data is the internal type of the storage. Declaration public PersistenceHandler<T, string[]> OnItemWrite { set; } Property Value Type Description PersistenceHandler <T, System.String []> | Improve this Doc View Source Permissions Gets the flags of permissions how files may be treated. Declaration public WritePermissions Permissions { get; } Property Value Type Description WritePermissions Methods | Improve this Doc View Source HasPermission(WritePermissions) Checks if the permission is a present flag or not. Declaration public bool HasPermission(WritePermissions permission) Parameters Type Name Description WritePermissions permission The enum that is checked. Returns Type Description System.Boolean True if the value is a present flag, otherwise false. | Improve this Doc View Source Read() Reads a given CSV file as data source and provides a collection of type T. If there is only one data object a collection with the length one is returned. Declaration public IEnumerable<T> Read() Returns Type Description IEnumerable <T> The resulting data objects of type T. | Improve this Doc View Source Update(FileInfo) Updates the reference to the internal instance so that the data sink can be updated. Declaration public IFileWritable<T> Update(FileInfo fileInfo) Parameters Type Name Description FileInfo fileInfo The new FileInfo object. Returns Type Description IFileWritable <T> The calling instance. | Improve this Doc View Source Update(String) Updates the reference to the internal instance so that the data sink can be updated. Declaration public IFileWritable<T> Update(string file) Parameters Type Name Description System.String file The new string of the file. Returns Type Description IFileWritable <T> The calling instance. | Improve this Doc View Source Write(IEnumerable<T>) Writes a collection of type T to a CSV file as data sink. If there is only one data object there is the need to provide a collection with one element. Declaration public void Write(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data The application-side data collection of type T. Implements IReadable<T> IFileWritable<T> IWritable<T>"
  },
  "api/TeleScope.Persistence.Csv.CsvStorageSetup.html": {
    "href": "api/TeleScope.Persistence.Csv.CsvStorageSetup.html",
    "title": "Class CsvStorageSetup | TeleScope Documentation",
    "keywords": "Class CsvStorageSetup This storage setup extends FileSetupBase to specify parameters for an access to CSV files. Inheritance System.Object FileSetupBase CsvStorageSetup Inherited Members FileSetupBase.File FileSetupBase.Filename FileSetupBase.Extension FileSetupBase.Location FileSetupBase.Exists FileSetupBase.Permissions FileSetupBase.Info() FileSetupBase.SetFile(FileInfo) Namespace : TeleScope.Persistence.Csv Assembly : TeleScope.Persistence.Csv.dll Syntax public class CsvStorageSetup : FileSetupBase Constructors | Improve this Doc View Source CsvStorageSetup(FileInfo) The constructor calls the according base class constructor and leaves the default settings of the property. Declaration public CsvStorageSetup(FileInfo fileInfo) Parameters Type Name Description FileInfo fileInfo The file information, the storage is attached to. | Improve this Doc View Source CsvStorageSetup(String) The constructor calls the according base class constructor and leaves the default settings of the property. Declaration public CsvStorageSetup(string file) Parameters Type Name Description System.String file The file represented as string, the storage is attached to. Properties | Improve this Doc View Source Encoder Gets or sets the encoding of the file. Declaration public Encoding Encoder { get; set; } Property Value Type Description Encoding | Improve this Doc View Source HasHeader Gets the information if the CSV storage has header information or not. Declaration public bool HasHeader { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Header Gets a string that is used as heading line(s) before CSV data starts. Declaration public string Header { get; set; } Property Value Type Description System.String | Improve this Doc View Source Separator Gets the character to identify the separation between values. Declaration public char Separator { get; set; } Property Value Type Description System.Char | Improve this Doc View Source StartRow Gets the index of the first row where the CSV data starts. Declaration public uint StartRow { get; set; } Property Value Type Description System.UInt32"
  },
  "api/TeleScope.Persistence.Csv.html": {
    "href": "api/TeleScope.Persistence.Csv.html",
    "title": "Namespace TeleScope.Persistence.Csv | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Csv Classes CsvStorage<T> This class provides access to CSV files (charcater separated values) and parses the data into the application-side type T. CsvStorageSetup This storage setup extends FileSetupBase to specify parameters for an access to CSV files."
  },
  "api/TeleScope.Persistence.Json.Binder.html": {
    "href": "api/TeleScope.Persistence.Json.Binder.html",
    "title": "Namespace TeleScope.Persistence.Json.Binder | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Json.Binder Classes KnownTypesBinder This class collects objects in order to include their names intor the de- and serialization process of Newtonsoft.Json. For more information, see custom SerializationBinder ."
  },
  "api/TeleScope.Persistence.Json.Binder.KnownTypesBinder.html": {
    "href": "api/TeleScope.Persistence.Json.Binder.KnownTypesBinder.html",
    "title": "Class KnownTypesBinder | TeleScope Documentation",
    "keywords": "Class KnownTypesBinder This class collects objects in order to include their names intor the de- and serialization process of Newtonsoft.Json. For more information, see custom SerializationBinder . Inheritance System.Object KnownTypesBinder Namespace : TeleScope.Persistence.Json.Binder Assembly : TeleScope.Persistence.Json.dll Syntax public class KnownTypesBinder : ISerializationBinder Constructors | Improve this Doc View Source KnownTypesBinder(IEnumerable<Type>) The default constructor takes all known types as input parameter stores them internally. Declaration public KnownTypesBinder(IEnumerable<Type> types) Parameters Type Name Description IEnumerable < Type > types The enumeration of known types. Methods | Improve this Doc View Source BindToName(Type, out String, out String) Controls the binding of a serialized object to a type. See ISerializationBinder . Declaration public void BindToName(Type serializedType, out string assemblyName, out string typeName) Parameters Type Name Description Type serializedType The type of the object the formatter creates a new instance of. System.String assemblyName Specifies the Assembly name of the serialized object. System.String typeName Specifies the Type name of the serialized object. | Improve this Doc View Source BindToType(String, String) Controls the binding of a serialized object to a type. See ISerializationBinder . Declaration public Type BindToType(string assemblyName, string typeName) Parameters Type Name Description System.String assemblyName Specifies the Assembly name of the serialized object. System.String typeName Specifies the Type name of the serialized object. Returns Type Description Type"
  },
  "api/TeleScope.Persistence.Json.Extensions.html": {
    "href": "api/TeleScope.Persistence.Json.Extensions.html",
    "title": "Namespace TeleScope.Persistence.Json.Extensions | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Json.Extensions Classes JsonSerializerSettingExtensions The extension class enables a simplified binding of concrete types to the Newtonsoft.Json de- and serialization process."
  },
  "api/TeleScope.Persistence.Json.Extensions.JsonSerializerSettingExtensions.html": {
    "href": "api/TeleScope.Persistence.Json.Extensions.JsonSerializerSettingExtensions.html",
    "title": "Class JsonSerializerSettingExtensions | TeleScope Documentation",
    "keywords": "Class JsonSerializerSettingExtensions The extension class enables a simplified binding of concrete types to the Newtonsoft.Json de- and serialization process. Inheritance System.Object JsonSerializerSettingExtensions Namespace : TeleScope.Persistence.Json.Extensions Assembly : TeleScope.Persistence.Json.dll Syntax public static class JsonSerializerSettingExtensions : object Methods | Improve this Doc View Source KnownTypes(JsonSerializerSettings, IEnumerable<Type>) Binds an enumerartion of Type to the calling instance of . Declaration public static void KnownTypes(this JsonSerializerSettings settings, IEnumerable<Type> types) Parameters Type Name Description JsonSerializerSettings settings The calling instance. IEnumerable < Type > types The types that need to be known by the de- and serialization process."
  },
  "api/TeleScope.Persistence.Json.html": {
    "href": "api/TeleScope.Persistence.Json.html",
    "title": "Namespace TeleScope.Persistence.Json | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Json Classes JsonStorage<T> This class provides access to JSON files and parses the data into the application-side type T. JsonStorageSetup This storage setup extends FileSetupBase to specify parameters for an access to JSON files."
  },
  "api/TeleScope.Persistence.Json.JsonStorage-1.html": {
    "href": "api/TeleScope.Persistence.Json.JsonStorage-1.html",
    "title": "Class JsonStorage<T> | TeleScope Documentation",
    "keywords": "Class JsonStorage<T> This class provides access to JSON files and parses the data into the application-side type T. Inheritance System.Object JsonStorage<T> Implements IReadable <T> IFileWritable <T> IWritable <T> Namespace : TeleScope.Persistence.Json Assembly : TeleScope.Persistence.Json.dll Syntax public class JsonStorage<T> : object, IReadable<T>, IFileWritable<T>, IWritable<T> Type Parameters Name Description T The type T is used application-side and can be read from the data source or be written to the data sink. Constructors | Improve this Doc View Source JsonStorage(String) The constructor takes the file string as input parameter, creates the JsonStorageSetup and allows to config the properties afterwards. Declaration public JsonStorage(string file) Parameters Type Name Description System.String file The specific JSON file that the storage is related to. | Improve this Doc View Source JsonStorage(JsonStorageSetup) The constructor takes the setup of type JsonStorageSetup as input parameter and binds the logging mechanism. Declaration public JsonStorage(JsonStorageSetup jsonSetup) Parameters Type Name Description JsonStorageSetup jsonSetup The setup is needed to work with a specific CSV file. Properties | Improve this Doc View Source Permissions Gets the flags of permissions how files may be treated. Declaration public WritePermissions Permissions { get; } Property Value Type Description WritePermissions Methods | Improve this Doc View Source HasPermission(WritePermissions) Checks if the permission is a present flag or not. Declaration public bool HasPermission(WritePermissions permission) Parameters Type Name Description WritePermissions permission The enum that is checked. Returns Type Description System.Boolean True if the value is a present flag, otherwise false. | Improve this Doc View Source Read() Reads a given JSON file as data source and provides a collection of type T. If there is only one data object a collection with the length one is returned. Declaration public IEnumerable<T> Read() Returns Type Description IEnumerable <T> The resulting data objects of type T. | Improve this Doc View Source Update(FileInfo) Updates the reference to the internal instance so that the data sink can be updated. Declaration public IFileWritable<T> Update(FileInfo fileInfo) Parameters Type Name Description FileInfo fileInfo The new FileInfo object. Returns Type Description IFileWritable <T> The calling instance. | Improve this Doc View Source Update(String) Updates the reference to the internal instance so that the data sink can be updated. Declaration public IFileWritable<T> Update(string file) Parameters Type Name Description System.String file The new string of the file. Returns Type Description IFileWritable <T> The calling instance. | Improve this Doc View Source Write(IEnumerable<T>) Writes a collection of type T to a JSON file as data sink. If there is only one data object there is the need to provide a collection with one element. If the collection has only one element the JSON file won't have an array as root element. Declaration public void Write(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data The application-side data collection of type T. Implements IReadable<T> IFileWritable<T> IWritable<T>"
  },
  "api/TeleScope.Persistence.Json.JsonStorageSetup.html": {
    "href": "api/TeleScope.Persistence.Json.JsonStorageSetup.html",
    "title": "Class JsonStorageSetup | TeleScope Documentation",
    "keywords": "Class JsonStorageSetup This storage setup extends FileSetupBase to specify parameters for an access to JSON files. Inheritance System.Object FileSetupBase JsonStorageSetup Inherited Members FileSetupBase.File FileSetupBase.Filename FileSetupBase.Extension FileSetupBase.Location FileSetupBase.Exists FileSetupBase.Permissions FileSetupBase.Info() FileSetupBase.SetFile(FileInfo) Namespace : TeleScope.Persistence.Json Assembly : TeleScope.Persistence.Json.dll Syntax public class JsonStorageSetup : FileSetupBase Constructors | Improve this Doc View Source JsonStorageSetup(FileInfo) The default constructor calls the constructor of the base class and defines UTF8 as default Encoder property. Declaration public JsonStorageSetup(FileInfo fileInfo) Parameters Type Name Description FileInfo fileInfo The information about the file that will get accessed by a file storage. | Improve this Doc View Source JsonStorageSetup(String) The constructor calls the according base class constructor and leaves the default settings of the property. Declaration public JsonStorageSetup(string file) Parameters Type Name Description System.String file The file represented as string, the storage is attached to. Properties | Improve this Doc View Source Encoder Gets or sets the encoding of the file. Declaration public Encoding Encoder { get; set; } Property Value Type Description Encoding | Improve this Doc View Source Format Gets or sets the formatting of the JSON file. The default value is . Declaration public Formatting Format { get; set; } Property Value Type Description Formatting | Improve this Doc View Source Settings Gets or sets the Newtonsoft JSON setting. Declaration public JsonSerializerSettings Settings { get; set; } Property Value Type Description JsonSerializerSettings"
  },
  "api/TeleScope.Persistence.Parquet.html": {
    "href": "api/TeleScope.Persistence.Parquet.html",
    "title": "Namespace TeleScope.Persistence.Parquet | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Parquet Classes ParquetStorage<T> This class provides access to Parquet files and parses the data into the application-side type T. ParquetStorageSetup This storage setup extends FileSetupBase to specify parameters for an access to Parquet files."
  },
  "api/TeleScope.Persistence.Parquet.ParquetStorage-1.html": {
    "href": "api/TeleScope.Persistence.Parquet.ParquetStorage-1.html",
    "title": "Class ParquetStorage<T> | TeleScope Documentation",
    "keywords": "Class ParquetStorage<T> This class provides access to Parquet files and parses the data into the application-side type T. Inheritance System.Object ParquetStorage<T> Implements IReadable <T> IFileWritable <T> IWritable <T> Namespace : TeleScope.Persistence.Parquet Assembly : TeleScope.Persistence.Parquet.dll Syntax public class ParquetStorage<T> : object, IReadable<T>, IFileWritable<T>, IWritable<T> where T : new() Type Parameters Name Description T The type T is used application-side and can be read from the data source or be written to the data sink. Constructors | Improve this Doc View Source ParquetStorage(String) The constructor takes the file string as input parameter, creates the ParquetStorageSetup and allows to config the properties afterwards. Declaration public ParquetStorage(string file) Parameters Type Name Description System.String file The specific Parquet file that the storage is related to. | Improve this Doc View Source ParquetStorage(ParquetStorageSetup) The constructor takes the setup of type ParquetStorageSetup as input parameter and binds the logging mechanism. Declaration public ParquetStorage(ParquetStorageSetup parquetSetup) Parameters Type Name Description ParquetStorageSetup parquetSetup The setup is needed to work with a specific Parquet file. Properties | Improve this Doc View Source Permissions Gets the flags of permissions how files may be treated. Declaration public WritePermissions Permissions { get; } Property Value Type Description WritePermissions Methods | Improve this Doc View Source HasPermission(WritePermissions) Checks if the permission is a present flag or not. Declaration public bool HasPermission(WritePermissions permission) Parameters Type Name Description WritePermissions permission The enum that is checked. Returns Type Description System.Boolean True if the value is a present flag, otherwise false. | Improve this Doc View Source Read() Reads a given Parquet file as data source and provides a collection of type T. If there is only one data object a collection with the length one is returned. Declaration public IEnumerable<T> Read() Returns Type Description IEnumerable <T> The resulting data objects of type T. | Improve this Doc View Source Update(FileInfo) Updates the reference to the internal instance so that the data sink can be updated. Declaration public IFileWritable<T> Update(FileInfo fileInfo) Parameters Type Name Description FileInfo fileInfo The new FileInfo object. Returns Type Description IFileWritable <T> The calling instance. | Improve this Doc View Source Update(String) Updates the reference to the internal instance so that the data sink can be updated. Declaration public IFileWritable<T> Update(string file) Parameters Type Name Description System.String file The new string of the file. Returns Type Description IFileWritable <T> The calling instance. | Improve this Doc View Source Write(IEnumerable<T>) Writes a collection of type T to a Parquet file as data sink. If there is only one data object there is the need to provide a collection with one element. If the collection has only one element the Parquet file won't have an array as root element. Declaration public void Write(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data The application-side data collection of type T. Implements IReadable<T> IFileWritable<T> IWritable<T>"
  },
  "api/TeleScope.Persistence.Parquet.ParquetStorageSetup.html": {
    "href": "api/TeleScope.Persistence.Parquet.ParquetStorageSetup.html",
    "title": "Class ParquetStorageSetup | TeleScope Documentation",
    "keywords": "Class ParquetStorageSetup This storage setup extends FileSetupBase to specify parameters for an access to Parquet files. Inheritance System.Object FileSetupBase ParquetStorageSetup Inherited Members FileSetupBase.File FileSetupBase.Filename FileSetupBase.Extension FileSetupBase.Location FileSetupBase.Exists FileSetupBase.Permissions FileSetupBase.Info() FileSetupBase.SetFile(FileInfo) Namespace : TeleScope.Persistence.Parquet Assembly : TeleScope.Persistence.Parquet.dll Syntax public class ParquetStorageSetup : FileSetupBase Constructors | Improve this Doc View Source ParquetStorageSetup(FileInfo, WritePermissions) The constructor calls the according base class constructor and leaves the default settings of the property. Declaration public ParquetStorageSetup(FileInfo fileInfo, WritePermissions permissions = default(WritePermissions)) Parameters Type Name Description FileInfo fileInfo The file information, the storage is attached to. WritePermissions permissions The permission flag to access the file. | Improve this Doc View Source ParquetStorageSetup(String, WritePermissions) The constructor calls the according base class constructor and leaves the default settings of the property. Declaration public ParquetStorageSetup(string file, WritePermissions permissions = default(WritePermissions)) Parameters Type Name Description System.String file The file represented as string, the storage is attached to. WritePermissions permissions The permission flag to access the file."
  },
  "api/TeleScope.Persistence.Yaml.html": {
    "href": "api/TeleScope.Persistence.Yaml.html",
    "title": "Namespace TeleScope.Persistence.Yaml | TeleScope Documentation",
    "keywords": "Namespace TeleScope.Persistence.Yaml Classes YamlStorage<T> This class provides access to YAML files and parses the data into the application-side type T. YamlStorageSetup This storage setup extends FileSetupBase to specify parameters for an access to YAML files."
  },
  "api/TeleScope.Persistence.Yaml.YamlStorage-1.html": {
    "href": "api/TeleScope.Persistence.Yaml.YamlStorage-1.html",
    "title": "Class YamlStorage<T> | TeleScope Documentation",
    "keywords": "Class YamlStorage<T> This class provides access to YAML files and parses the data into the application-side type T. Inheritance System.Object YamlStorage<T> Implements IReadable <T> IFileWritable <T> IWritable <T> Namespace : TeleScope.Persistence.Yaml Assembly : TeleScope.Persistence.Yaml.dll Syntax public class YamlStorage<T> : object, IReadable<T>, IFileWritable<T>, IWritable<T> Type Parameters Name Description T The type T is used application-side and can be read from the data source or be written to the data sink. Constructors | Improve this Doc View Source YamlStorage(String) The constructor takes the file string as input parameter, creates the YamlStorageSetup and allows to config the properties afterwards. Declaration public YamlStorage(string file) Parameters Type Name Description System.String file The specific YAML file that the storage is related to. | Improve this Doc View Source YamlStorage(YamlStorageSetup) The constructor takes the setup of type YamlStorageSetup as input parameter and binds the logging mechanism. Declaration public YamlStorage(YamlStorageSetup yamlSetup) Parameters Type Name Description YamlStorageSetup yamlSetup The setup is needed to work with a specific YAML file. Properties | Improve this Doc View Source Permissions Gets the flags of permissions how files may be treated. Declaration public WritePermissions Permissions { get; } Property Value Type Description WritePermissions Methods | Improve this Doc View Source HasPermission(WritePermissions) Checks if the permission is a present flag or not. Declaration public bool HasPermission(WritePermissions permission) Parameters Type Name Description WritePermissions permission The enum that is checked. Returns Type Description System.Boolean True if the value is a present flag, otherwise false. | Improve this Doc View Source Read() Reads a given YAML file as data source and provides a collection of type T. If there is only one data object a collection with the length one is returned. Declaration public IEnumerable<T> Read() Returns Type Description IEnumerable <T> The resulting data objects of type T. | Improve this Doc View Source Update(FileInfo) Updates the reference to the internal instance so that the data sink can be updated. Declaration public IFileWritable<T> Update(FileInfo fileInfo) Parameters Type Name Description FileInfo fileInfo The new FileInfo object. Returns Type Description IFileWritable <T> The calling instance. | Improve this Doc View Source Update(String) Updates the reference to the internal instance so that the data sink can be updated. Declaration public IFileWritable<T> Update(string file) Parameters Type Name Description System.String file The new string of the file. Returns Type Description IFileWritable <T> The calling instance. | Improve this Doc View Source Write(IEnumerable<T>) Writes a collection of type T to a YAML file as data sink. If there is only one data object there is the need to provide a collection with one element. Declaration public void Write(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data The application-side data collection of type T. Implements IReadable<T> IFileWritable<T> IWritable<T>"
  },
  "api/TeleScope.Persistence.Yaml.YamlStorageSetup.html": {
    "href": "api/TeleScope.Persistence.Yaml.YamlStorageSetup.html",
    "title": "Class YamlStorageSetup | TeleScope Documentation",
    "keywords": "Class YamlStorageSetup This storage setup extends FileSetupBase to specify parameters for an access to YAML files. Inheritance System.Object FileSetupBase YamlStorageSetup Inherited Members FileSetupBase.File FileSetupBase.Filename FileSetupBase.Extension FileSetupBase.Location FileSetupBase.Exists FileSetupBase.Permissions FileSetupBase.Info() FileSetupBase.SetFile(FileInfo) Namespace : TeleScope.Persistence.Yaml Assembly : TeleScope.Persistence.Yaml.dll Syntax public class YamlStorageSetup : FileSetupBase Constructors | Improve this Doc View Source YamlStorageSetup(FileInfo, WritePermissions) The constructor calls the according base class constructor and leaves the default settings of the property. Declaration public YamlStorageSetup(FileInfo fileInfo, WritePermissions permissions = default(WritePermissions)) Parameters Type Name Description FileInfo fileInfo The file information, the storage is attached to. WritePermissions permissions The permission flag to access the file. | Improve this Doc View Source YamlStorageSetup(String, WritePermissions) The constructor calls the according base class constructor and leaves the default settings of the property. Declaration public YamlStorageSetup(string file, WritePermissions permissions = default(WritePermissions)) Parameters Type Name Description System.String file The file represented as string, the storage is attached to. WritePermissions permissions The permission flag to access the file. Properties | Improve this Doc View Source Encoder Gets or sets the encoding of the file. The default value is . Declaration public Encoding Encoder { get; set; } Property Value Type Description Encoding | Improve this Doc View Source ValueHandling Gets or sets the value handing for default or null values. The default value is . Declaration public DefaultValuesHandling ValueHandling { get; set; } Property Value Type Description DefaultValuesHandling"
  },
  "api/TeleScope.UI.Cli.Options.CliAttribute.html": {
    "href": "api/TeleScope.UI.Cli.Options.CliAttribute.html",
    "title": "Class CliAttribute | TeleScope Documentation",
    "keywords": "Class CliAttribute Attribute class to add names for command line options. Inheritance System.Object CliAttribute Namespace : TeleScope.UI.Cli.Options Assembly : TeleScope.UI.Cli.dll Syntax public class CliAttribute : Attribute Constructors | Improve this Doc View Source CliAttribute() The default empty constructor. Declaration public CliAttribute() | Improve this Doc View Source CliAttribute(String, String) The constructor sets the properties Short and Long of the attribute. Declaration public CliAttribute(string shortTerm, string longTerm) Parameters Type Name Description System.String shortTerm System.String longTerm Properties | Improve this Doc View Source Long Gets or sets the long term of the command line option. Do not use any special characters, pre- or suffixes. Declaration public string Long { get; set; } Property Value Type Description System.String | Improve this Doc View Source Short Gets or sets the short term of the command line option. Do not use any special characters, pre- or suffixes. Declaration public string Short { get; set; } Property Value Type Description System.String"
  },
  "api/TeleScope.UI.Cli.Options.CliOptionParser-1.html": {
    "href": "api/TeleScope.UI.Cli.Options.CliOptionParser-1.html",
    "title": "Class CliOptionParser<T> | TeleScope Documentation",
    "keywords": "Class CliOptionParser<T> This class provides a routine to put application arguments into properties of an object of type T, where matching CliAttribute are applied to the properties. Inheritance System.Object CliOptionParser<T> Namespace : TeleScope.UI.Cli.Options Assembly : TeleScope.UI.Cli.dll Syntax public class CliOptionParser<T> : object where T : new() Type Parameters Name Description T The type of the arguments class. Constructors | Improve this Doc View Source CliOptionParser() The default constructor creates a new instance of the options and sets the prefix to - . The format is set to InvariantCulture . Declaration public CliOptionParser() | Improve this Doc View Source CliOptionParser(IFormatProvider) The constructor calls the default constructor and overrides the Format property. Declaration public CliOptionParser(IFormatProvider format) Parameters Type Name Description IFormatProvider format The format specifies how the strings are parsed into types of the target properties. | Improve this Doc View Source CliOptionParser(String) The constructor calls the default constructor and overrides the Prefix property. Declaration public CliOptionParser(string prefix) Parameters Type Name Description System.String prefix The prefix that is used for identifying application arguments in the string array. | Improve this Doc View Source CliOptionParser(String, IFormatProvider) he constructor calls the default constructor and overrides the Prefix and Format properties. Declaration public CliOptionParser(string prefix, IFormatProvider format) Parameters Type Name Description System.String prefix The prefix that is used for identifying application arguments in the string array. IFormatProvider format The format specifies how the strings are parsed into types of the target properties. Properties | Improve this Doc View Source Format Gets or sets the format how the strings are parsed into types of the target properties. Declaration public IFormatProvider Format { get; set; } Property Value Type Description IFormatProvider | Improve this Doc View Source Prefix Gets or sets the Prefix that is used to identify options. Declaration public string Prefix { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ReadArguments(String[]) Reads the command line arguments and places them into the properties of the according instance of type T. Declaration public T ReadArguments(string[] args) Parameters Type Name Description System.String [] args The cli options of the main method. Returns Type Description T The resulting instance of type T."
  },
  "api/TeleScope.UI.Cli.Options.html": {
    "href": "api/TeleScope.UI.Cli.Options.html",
    "title": "Namespace TeleScope.UI.Cli.Options | TeleScope Documentation",
    "keywords": "Namespace TeleScope.UI.Cli.Options Classes CliAttribute Attribute class to add names for command line options. CliOptionParser<T> This class provides a routine to put application arguments into properties of an object of type T, where matching CliAttribute are applied to the properties."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Add your introductions here! | TeleScope Documentation",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "TeleScope DOCS | TeleScope Documentation",
    "keywords": "TeleScope DOCS ‚ú® The project aims for any project type or distant targets, just like a telescope . üíé The NuGet packages are strongly based on Clean Architecture Principles and are encapsukated to maximize their reusability. üìö The framework contains of 15+ packages for cross-cutting concerns , like connectors to external services, persistence layer and helpers for client code or user interactions. üî≠ Structure of this site üìã Articles üìö API Documentation Explore examples and further explanations about major features. In the next time there will be examples about all cathegories. Discover the entire public API . Classes, methods, events, members and so on are described with the auto-generated documentation. üöÄ Quick Start The TeleScope project provides separate NuGet packages for abstractions and implementations. Please use the assemblies within a particular application layer, depending on whether an abstraction or its implementation is needed. Simply install the desired packages in your preferred way with NuGet Package Manager, CLI or xml reference. Package Manager CLI Reference PM> Install-Package TeleScope.{awesome-package} -Version 2.*.* > dotnet add package TeleScope.{awesome-package} --version 2.*.* <PackageReference Include=\"TeleScope.Connectors.Abstractions\" Version=\"2.0.0\" /> Note For projects that support PackageReference, copy this XML node into the project file to reference the package. NuGet Packages A full overview of all provided packages can be found below. General Connectors Persistence User Interfaces TeleScope.* Packages GuardClauses Logging TeleScope.Connectors.* Packages Abstractions Mqtt beta Http Plc beta Smtp TeleScope.Persistence.* Packages Abstractions Json Yaml Csv Parquet TeleScope.UI.* Packages Cli üåê Clean Architecture Principles The TeleScope project supports any architectural approach, but it was designed for Clean Architecture projects. There might be differences in naming this architectural approach or its layers, but the goal remains the same. Note Keep your business logic clean and free from external dependencies or their breaking changes. The implementation of follows the ideals of Uncle Bob and Jason Taylor - so thank you both! üçª Of course, TeleScope packages are external dependencies for other projects. So TeleScope separates its entities from the implementations, so that other projects may inject them where they are needed. Additionally, you can take advantage of the example implementations or you are also free to create your own implementations."
  },
  "README.html": {
    "href": "README.html",
    "title": "| TeleScope Documentation",
    "keywords": "Open Packet-Manager console and run docfx TeleScope.Docu/docfx.json --serve"
  }
}