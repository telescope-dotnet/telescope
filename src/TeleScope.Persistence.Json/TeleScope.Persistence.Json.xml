<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TeleScope.Persistence.Json</name>
    </assembly>
    <members>
        <member name="T:TeleScope.Persistence.Json.Binder.KnownTypesBinder">
            <summary>
            This class collects <seealso cref="T:System.Type"/> objects in order to include their names intor the 
            de- and serialization process of Newtonsoft.Json.
            For more information, see [custom SerializationBinder](https://www.newtonsoft.com/json/help/html/SerializeSerializationBinder.htm).
            </summary>
        </member>
        <member name="M:TeleScope.Persistence.Json.Binder.KnownTypesBinder.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            The default constructor takes all known types as input parameter stores them internally.
            </summary>
            <param name="types">The enumeration of known types.</param>
        </member>
        <member name="M:TeleScope.Persistence.Json.Binder.KnownTypesBinder.BindToType(System.String,System.String)">
            <summary>
            Controls the binding of a serialized object to a type.
            See [ISerializationBinder](https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Serialization_ISerializationBinder.htm).
            </summary>
            <param name="assemblyName">Specifies the Assembly name of the serialized object.</param>
            <param name="typeName">Specifies the Type name of the serialized object.</param>
            <returns></returns>
        </member>
        <member name="M:TeleScope.Persistence.Json.Binder.KnownTypesBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            Controls the binding of a serialized object to a type.
            See [ISerializationBinder](https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Serialization_ISerializationBinder.htm).
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the Assembly name of the serialized object.</param>
            <param name="typeName">Specifies the Type name of the serialized object.</param>
        </member>
        <member name="T:TeleScope.Persistence.Json.Extensions.JsonSerializerSettingExtensions">
            <summary>
            The extension class enables a simplified binding of concrete types 
            to the `Newtonsoft.Json` de- and serialization process.
            </summary>
        </member>
        <member name="M:TeleScope.Persistence.Json.Extensions.JsonSerializerSettingExtensions.KnownTypes(Newtonsoft.Json.JsonSerializerSettings,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Binds an enumerartion of `Type` to the calling instance of <seealso cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="settings">The calling instance.</param>
            <param name="types">The types that need to be known by the de- and serialization process.</param>
        </member>
        <member name="T:TeleScope.Persistence.Json.JsonStorage`1">
            <summary>
            This class provides access to JSON files and parses the data into the application-side type T.
            </summary>
            <typeparam name="T">The type T is used application-side and can be read from the data source 
            or be written to the data sink.</typeparam>
        </member>
        <member name="P:TeleScope.Persistence.Json.JsonStorage`1.Permissions">
            <summary>
            Gets the flags of permissions how files may be treated. 
            </summary>
        </member>
        <member name="M:TeleScope.Persistence.Json.JsonStorage`1.#ctor(System.String,System.Action{TeleScope.Persistence.Json.JsonStorageSetup})">
            <summary>
            The constructor takes the file string as input parameter, 
            creates the <see cref="T:TeleScope.Persistence.Json.JsonStorageSetup"/> and allows to config the properties afterwards.
            </summary>
            <param name="file">The specific JSON file that the storage is related to.</param>
            <param name="config">The optional action to configure the created setup.</param>
        </member>
        <member name="M:TeleScope.Persistence.Json.JsonStorage`1.#ctor(TeleScope.Persistence.Json.JsonStorageSetup)">
            <summary>
            The constructor takes the setup of type <see cref="T:TeleScope.Persistence.Json.JsonStorageSetup"/> as input parameter
            and binds the logging mechanism.
            </summary>
            <param name="jsonSetup">The setup is needed to work with a specific CSV file.</param>
        </member>
        <member name="M:TeleScope.Persistence.Json.JsonStorage`1.HasPermission(TeleScope.Persistence.Abstractions.Enumerations.WritePermissions)">
            <summary>
            Checks if the permission is a present flag or not. 
            </summary>
            <param name="permission">The enum that is checked.</param>
            <returns>True if the value is a present flag, otherwise false.</returns>
        </member>
        <member name="M:TeleScope.Persistence.Json.JsonStorage`1.Read">
            <summary>
            Reads a given JSON file as data source and provides a collection of type T.
            If there is only one data object a collection with the length one is returned.
            </summary>
            <returns>The resulting data objects of type T.</returns>
        </member>
        <member name="M:TeleScope.Persistence.Json.JsonStorage`1.Write(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes a collection of type T to a JSON file as data sink.
            If there is only one data object there is the need to provide a collection with one element.
            If the collection has only one element the JSON file won't have an array as root element.
            </summary>
            <param name="data">The application-side data collection of type T.</param>
        </member>
        <member name="M:TeleScope.Persistence.Json.JsonStorage`1.Update(System.String)">
            <summary>
            Updates the reference to the internal <see cref="T:System.IO.FileInfo"/> instance 
            so that the data sink can be updated. 
            </summary>
            <param name="file">The new string of the file.</param>
            <returns>The calling instance.</returns>
        </member>
        <member name="M:TeleScope.Persistence.Json.JsonStorage`1.Update(System.IO.FileInfo)">
            <summary>
            Updates the reference to the internal <see cref="T:System.IO.FileInfo"/> instance 
            so that the data sink can be updated. 
            </summary>
            <param name="fileInfo">The new FileInfo object.</param>
            <returns>The calling instance.</returns>
        </member>
        <member name="T:TeleScope.Persistence.Json.JsonStorageSetup">
            <summary>
            This storage setup extends <seealso cref="T:TeleScope.Persistence.Abstractions.FileSetupBase"/> 
            to specify parameters for an access to JSON files. 
            </summary>
        </member>
        <member name="P:TeleScope.Persistence.Json.JsonStorageSetup.Settings">
            <summary>
            Gets or sets the Newtonsoft JSON setting.
            </summary>
        </member>
        <member name="P:TeleScope.Persistence.Json.JsonStorageSetup.Format">
            <summary>
            Gets or sets the formatting of the JSON file.
            The default value is <see cref="F:Newtonsoft.Json.Formatting.Indented"/>.
            </summary>
        </member>
        <member name="P:TeleScope.Persistence.Json.JsonStorageSetup.Encoder">
            <summary>
            Gets or sets the encoding of the file.
            </summary>
        </member>
        <member name="M:TeleScope.Persistence.Json.JsonStorageSetup.#ctor(System.String)">
            <summary>
            The constructor calls the according base class constructor and 
            leaves the default settings of the property.
            </summary>
            <param name="file">The file represented as string, the storage is attached to.</param>
        </member>
        <member name="M:TeleScope.Persistence.Json.JsonStorageSetup.#ctor(System.IO.FileInfo)">
            <summary>
            The default constructor calls the constructor of the base class and 
            defines `UTF8` as default <seealso cref="P:TeleScope.Persistence.Json.JsonStorageSetup.Encoder"/> property.
            </summary>
            <param name="fileInfo">The information about the file that will get accessed by a file storage.</param>
        </member>
    </members>
</doc>
